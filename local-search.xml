<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>CSharp 设计模式</title>
    <link href="/2022/06/30/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    <url>/2022/06/30/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/</url>
    
    <content type="html"><![CDATA[<h1 id="C-设计模式"><a href="#C-设计模式" class="headerlink" title="C#设计模式"></a>C#设计模式</h1><h2 id="设计模式概述"><a href="#设计模式概述" class="headerlink" title="设计模式概述"></a>设计模式概述</h2><p>设计模式共<strong>23</strong>种。主要分为三部分：创建型模式、机构型模式、行为型模式。</p><p><strong>创建型模式：</strong>所有的模式都涉及到创建对象实例的方式。</p><p><strong>结构型模式：</strong>如何组合类和对象以获得更大的结构。</p><p><strong>行为型模式：</strong>通常和对象之间的通信有关。</p><p><strong>创建型模式：简单工厂模式、工厂方法模式、抽象工厂模式、单例模式、建造者模式、原型模式</strong></p><p>工厂方法：提供了一个简单的决策类，它根据提供的数据返回一个抽象基类的多个子类中的一个。</p><p>抽象工厂：提供了一个创建并返回一些列相关对象的接口。</p><p>单例：某个类只能有一个实例。它提供了一个访问该实例的全局访问点。</p><p>建造者：将一个复杂的构建与它的表示分开，这样就能根据程序的需要创建不同的表现形式。</p><p>原型：先实例化一个类，然后拷贝或克隆该类来创建新的实例，可以用公有方法进一步修改这些实例。</p><p><strong>结构型模式：适配器模式、桥接模式、组合模式、装饰模式、外观模式、享元模式、代理模式</strong></p><p>适配器：将一个类的接口传换成另一个类的接口。</p><p>桥接：可以将一个类的接口与它的实现分离，这样可以不用修改客户端代码就能改变或替换实现过程。</p><p>组合：是一个对象的集合，其中的任何一个对象既可以是一个组合，也可以只是一个叶子对象。</p><p>装饰：用一个类包装给定的类，并为它添加新的功能，将所有未改动的方法传递给下面的类。</p><p>外观：将一系列复杂的对象放在一起，并提供一个新的、更简单的访问这些数据的接口。</p><p>享元：把一部分的类数据移到类外部，在执行方法时将数据传递进来，通过这种方式限制那些又小又相似的实例的增加数量。</p><p>代理：为一个比较复杂的对象提供一个简单的占位对象，实例化该复杂对象，在某种程度上比较浪费时间或代价较高。</p><p><strong>行为型模式：职责链、命令模式、（解释器模式？）、迭代器模式、中介者模式、备忘录模式、观察者模式、状态模式、策略模式、模板方法模式、访问者模式</strong></p><p>职责链：把请求从链中的一个对象传递到下一个对象，直到请求被响应为止。通过这种方式在对象之间去除耦合。</p><p>命令：用简单的对象表示软件命令的执行，支持登陆和取消操作。</p><p>解释器：提供一个如何把语言元素包含在程序中的定义。</p><p>迭代器：提供了一种顺序访问一个类中的一系列数据的方式。</p><p>中介者：定义了如何用一个对象简化对象之间的通信，是对象之间不必相互了解。</p><p>备忘录：定义了如何保存一个类实例的内容以便以后能恢复它。</p><p>观察者：定义了一种把改动通知给多个对象的方式。</p><p>状态：允许一个对象在其内部状态改变时修改它的行为。</p><p>策略：将算法封装到类里。</p><p>模板方法：提供了算法的抽象定义。</p><p>访问者：在不改变类的前提下，为一个类添加多种操作。</p><hr><h2 id="UML类图"><a href="#UML类图" class="headerlink" title="UML类图"></a>UML类图</h2><p><img src="https://raw.githubusercontent.com/MCIBlueMoon/PicGO_Img/main/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/UML%E4%BD%BF%E7%94%A8.png"></p><p><strong><font color="FF0000">注意:</font></strong></p><p><strong><font color="ff0000">“+”表示public，”-“表示private，”#”表示protected</font></strong></p><p><strong><font color="FF0000">空心三角形+实线表示实现继承</font></strong></p><p><strong><font color="FF0000">空心三角形+虚线表示实现接口</font></strong></p><p><strong><font color="FF0000">关联关系用实线箭头</font></strong></p><p><strong><font color="FF0000">聚合关系用空心菱形+实线箭头</font></strong></p><p><strong><font color="FF0000">依赖关系用虚线箭头</font></strong></p><hr><h2 id="一、创建型设计模式"><a href="#一、创建型设计模式" class="headerlink" title="一、创建型设计模式"></a>一、创建型设计模式</h2><h3 id="①-简单工厂模式"><a href="#①-简单工厂模式" class="headerlink" title="① 简单工厂模式"></a>① 简单工厂模式</h3><h4 id="1、引言"><a href="#1、引言" class="headerlink" title="1、引言"></a>1、引言</h4><p>　　这个系列也是自己对设计模式的一些学习笔记,希望对一些初学设计模式的人有所帮助的,在上一个专题中介绍了单例模式,在这个专题中继续为大家介绍一个比较容易理解的模式——简单工厂模式。</p><h4 id="2、简单工厂模式的介绍"><a href="#2、简单工厂模式的介绍" class="headerlink" title="2、简单工厂模式的介绍"></a>2、简单工厂模式的介绍</h4><p>　　说到简单工厂，自然的第一个疑问当然就是什么是简单工厂模式了？ 在现实生活中工厂是负责生产产品的,同样在设计模式中,简单工厂模式我们也可以理解为负责<strong>生产对象的一个类</strong>, 我们平常编程中，当使用”new”关键字创建一个对象时，此时该类就依赖与这个对象，也就是他们之间的耦合度高，当需求变化时，我们就不得不去修改此类的源码，此时我们可以运用面向对象（OO）的很重要的原则去解决这一的问题，该原则就是——<font color="#FF0000">封装改变，既然要封装改变，自然也就要找到改变的代码，然后把改变的代码用类来封装</font>，这样的一种思路也就是我们简单工厂模式的实现方式了。下面通过一个现实生活中的例子来引出简单工厂模式。</p><h4 id="3、实现"><a href="#3、实现" class="headerlink" title="3、实现"></a>3、实现</h4><p><strong>简单工厂类：</strong></p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs c#"><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title">OperationFactory</span><br>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Operation <span class="hljs-title">createOperate</span>(<span class="hljs-params"><span class="hljs-built_in">string</span> operate</span>)</span><br>    &#123;<br>     Operation oper=<span class="hljs-literal">null</span>;<br>        <span class="hljs-keyword">switch</span>(operate)<br>        &#123;<br>            <span class="hljs-keyword">case</span> <span class="hljs-string">&quot;+&quot;</span>:<br>                oper = <span class="hljs-keyword">new</span> OperationAdd();<br>                <span class="hljs-keyword">break</span>;<br>            <span class="hljs-keyword">case</span> <span class="hljs-string">&quot;-&quot;</span>:<br>                oper = <span class="hljs-keyword">new</span> OpeationSub();<br>            <span class="hljs-keyword">break</span>;<br>            <span class="hljs-keyword">case</span> <span class="hljs-string">&quot;*&quot;</span>:<br>                oper = <span class="hljs-keyword">new</span> OperationMul();<br>            <span class="hljs-keyword">case</span> <span class="hljs-string">&quot;/&quot;</span>:<br>                oper = <span class="hljs-keyword">new</span> OperationDiv();<br>                <span class="hljs-keyword">break</span>;<br>        &#125;<br>        <span class="hljs-keyword">return</span> oper;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/MCIBlueMoon/PicGO_Img/main/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E7%AE%80%E5%8D%95%E5%B7%A5%E5%8E%82UML.png"></p><h4 id="4、优点与缺点"><a href="#4、优点与缺点" class="headerlink" title="4、优点与缺点"></a>4、优点与缺点</h4><p>​<strong>1.主要优点</strong></p><p>​    简单工厂模式的主要优点如下：</p><p>​    (1) 工厂类包含必要的判断逻辑，可以决定在什么时候创建哪一个产品类的实例，客户端可以免除直接创建产品对象的职责，而仅仅“消费”产品，简单工厂模式实现了对象创建和使用的分离。</p><p>​    (2) 客户端无须知道所创建的具体产品类的类名，只需要知道具体产品类所对应的参数即可，对于一些复杂的类名，通过简单工厂模式可以在一定程度减少使用者的记忆量。</p><p>​    (3) 通过引入配置文件，可以在不修改任何客户端代码的情况下更换和增加新的具体产品类，在一定程度上提高了系统的灵活性。</p><p>​     <strong>2. 主要缺点</strong></p><p>​    简单工厂模式的主要缺点如下：</p><p>​    (1) 由于工厂类集中了所有产品的创建逻辑，职责过重，一旦不能正常工作，整个系统都要受到影响。</p><p>​    (2) 使用简单工厂模式势必会增加系统中类的个数（引入了新的工厂类），增加了系统的复杂度和理解难度。</p><p>​    (3) 系统扩展困难，一旦添加新产品就不得不修改工厂逻辑，在产品类型较多时，有可能造成工厂逻辑过于复杂，不利于系统的扩展和维护。</p><p>​    (4) 简单工厂模式由于使用了静态工厂方法，造成工厂角色无法形成基于继承的等级结构。</p><hr><h3 id="②-工厂方法模式"><a href="#②-工厂方法模式" class="headerlink" title="② 工厂方法模式"></a>② 工厂方法模式</h3><h4 id="1、引言-1"><a href="#1、引言-1" class="headerlink" title="1、引言"></a>1、引言</h4><p>　　<strong>工厂方法模式(Factory Method Pattern)：</strong>定义一个用于创建对象的接口，让子类决定将哪一个类实例化。工厂方法模式让一个类的实例化延迟到其子类。工厂方法模式又简称为工厂模式(Factory Pattern)，又可称作虚拟构造器模式(Virtual Constructor Pattern)或多态工厂模式(Polymorphic Factory Pattern)。工厂方法模式是一种类创建型模式。</p><h4 id="2、工厂方法模式的介绍"><a href="#2、工厂方法模式的介绍" class="headerlink" title="2、工厂方法模式的介绍"></a>2、工厂方法模式的介绍</h4><p>　　工厂方法模式之所以可以解决简单工厂的模式，是因为它的实现把具体产品的创建推迟到子类中，此时工厂类不再负责所有产品的创建，而只是给出具体工厂必须实现的接口，这样工厂方法模式就可以允许系统不修改工厂类逻辑的情况下来添加新产品，这样也就克服了简单工厂模式中缺点。</p><h4 id="3、实现-1"><a href="#3、实现-1" class="headerlink" title="3、实现"></a>3、实现</h4><div align="center"><b>工厂方法UML</b></div><p><img src="https://raw.githubusercontent.com/MCIBlueMoon/PicGO_Img/main/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E5%B7%A5%E5%8E%82%E6%96%B9%E6%B3%95UML.png"></p><blockquote><p>&#x2F;&#x2F;工厂接口</p></blockquote><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs C#"><span class="hljs-keyword">interface</span> <span class="hljs-title">IFactory</span><br>&#123;<br>    <span class="hljs-function">Operation <span class="hljs-title">CreateOperation</span>()</span>;<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>加减乘除各间一个具体工厂去实现这个接口</p></blockquote><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs C#"><span class="hljs-keyword">class</span> <span class="hljs-title">AddFactory</span>:<span class="hljs-title">IFactory</span><br>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> Operation <span class="hljs-title">CreateOperation</span>()</span><br>    &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> OperationAdd();<br>    &#125;<br>&#125;<br><span class="hljs-keyword">class</span> <span class="hljs-title">SubFactory</span>:<span class="hljs-title">IFactory</span><br>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> Operation <span class="hljs-title">CreateOperation</span>()</span><br>    &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> OperationSub();<br>    &#125;<br>&#125;<br><span class="hljs-keyword">class</span> <span class="hljs-title">MulFactory</span>:<span class="hljs-title">IFactory</span><br>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> Operation <span class="hljs-title">CreateOperation</span>()</span><br>    &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> OperationMul();<br>    &#125;<br>&#125;<br><span class="hljs-keyword">class</span> <span class="hljs-title">DivFactory</span>:<span class="hljs-title">IFactory</span><br>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> Operation <span class="hljs-title">CreateOperation</span>()</span><br>    &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> OperationDiv();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>客户端实现</p></blockquote><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs C#">IFactory operFactory=<span class="hljs-keyword">new</span> AddFactory();<br>Operation oper=operFactory.CreatOperation();<br>oper.NumberA=<span class="hljs-number">1</span>;<br>oper.NumberB=<span class="hljs-number">2</span>;<br><span class="hljs-built_in">double</span> result=oper.GetResult;<br></code></pre></td></tr></table></figure><div align="center"><b>工厂方法结构图</b></div><p><img src="https://raw.githubusercontent.com/MCIBlueMoon/PicGO_Img/main/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E5%B7%A5%E5%8E%82%E6%96%B9%E6%B3%95%E7%BB%93%E6%9E%84%E5%9B%BE.png"></p><h4 id="4、优点与缺点-1"><a href="#4、优点与缺点-1" class="headerlink" title="4、优点与缺点"></a>4、优点与缺点</h4><p>​<strong>1.主要优点</strong></p><p>​    工厂方法模式的主要优点如下：</p><p>​    (1) 在工厂方法模式中，工厂方法用来创建客户所需要的产品，同时还向客户隐藏了哪种具体产品类将被实例化这一细节，用户只需要关心所需产品对应的工厂，无须关心创建细节，甚至无须知道具体产品类的类名。</p><p>​    (2) 基于工厂角色和产品角色的多态性设计是工厂方法模式的关键。它能够让工厂可以自主确定创建何种产品对象，而如何创建这个对象的细节则完全封装在具体工厂内部。工厂方法模式之所以又被称为多态工厂模式，就正是因为所有的具体工厂类都具有同一抽象父类。</p><p>​    (3) 使用工厂方法模式的另一个优点是在系统中加入新产品时，无须修改<strong>抽象工厂</strong>和抽象产品提供的接口，无须修改客户端，也无须修改其他的具体工厂和具体产品，而只要添加一个具体工厂和具体产品就可以了，这样，系统的可扩展性也就变得非常好，完全符合“开闭原则”。</p><p>​<strong>2.主要缺点</strong></p><p>   工厂方法模式的主要缺点如下：</p><p>   (1) 在添加新产品时，需要编写新的具体产品类，而且还要提供与之对应的具体工厂类，系统中类的个数将成对增加，在一定程度上增加了系统的复杂度，有更多的类需要编译和运行，会给系统带来一些额外的开销。</p><p>   (2) 由于考虑到系统的可扩展性，需要引入抽象层，在客户端代码中均使用抽象层进行定义，增加了系统的抽象性和理解难度，且在实现时可能需要用到DOM、反射等技术，增加了系统的实现难度。</p><h4 id="5、总结"><a href="#5、总结" class="headerlink" title="5、总结"></a>5、总结</h4><p><strong>工厂方法模式(Factory Method)</strong>,定义一个用于创建对象的接口，让子类决定实例化哪一个类。工厂方法使一个类的实例化延迟到其子类。</p><hr><h3 id="③-抽象工厂模式"><a href="#③-抽象工厂模式" class="headerlink" title="③ 抽象工厂模式"></a>③ 抽象工厂模式</h3><h4 id="1、引言-2"><a href="#1、引言-2" class="headerlink" title="1、引言"></a>1、引言</h4><p>​工厂方法模式是为了克服简单工厂模式的缺点而设计出来的,简单工厂模式的工厂类随着产品类的增加需要增加额外的代码），而工厂方法模式每个具体工厂类只完成单个实例的创建,所以它具有很好的可扩展性。但是在现实生活中，一个工厂只创建单个产品这样的例子很少，因为现在的工厂都多元化了，一个工厂创建一系列的产品，如果我们要设计这样的系统时，工厂方法模式显然在这里不适用，然后抽象工厂模式却可以很好地解决一系列产品创建的问题</p><h4 id="2、抽象工厂模式的介绍"><a href="#2、抽象工厂模式的介绍" class="headerlink" title="2、抽象工厂模式的介绍"></a>2、抽象工厂模式的介绍</h4><p>​抽象工厂模式：<strong>提供一个创建一系列相关或相互依赖对象的接口，而无须指定它们具体的类。抽象工厂模式又称为Kit模式，它是一种对象创建型模式。</strong></p><h4 id="3、实现-2"><a href="#3、实现-2" class="headerlink" title="3、实现"></a>3、实现</h4><p><img src="https://raw.githubusercontent.com/MCIBlueMoon/PicGO_Img/main/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E6%8A%BD%E8%B1%A1%E5%B7%A5%E5%8E%82Uml.png"></p><blockquote><p>IDepartment接口，用于客户端访问，解除与具体数据库访问的耦合</p></blockquote><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs C#"><span class="hljs-keyword">interface</span> <span class="hljs-title">IDepartment</span><br>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">Insert</span>(<span class="hljs-params">Department department</span>)</span>;<br>    <br>    <span class="hljs-function">Department <span class="hljs-title">GetDepartment</span>(<span class="hljs-params"><span class="hljs-built_in">int</span> id</span>)</span>;<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>SqlseverDepartment类，用于访问SQL sever的Department</p></blockquote><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs C#"><span class="hljs-keyword">class</span> <span class="hljs-title">SqlserverDepartment</span> : <span class="hljs-title">Ideparment</span><br>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">Insert</span>(<span class="hljs-params">Department department</span>)</span><br>    &#123;<br>        Console.WriteLine(<span class="hljs-string">&quot;在Sql server中给Department 表增加一条记录&quot;</span>)<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> Department <span class="hljs-title">GetDepartment</span>(<span class="hljs-params"><span class="hljs-built_in">int</span> id</span>)</span><br>    &#123;<br>        Console.WriteLine(<span class="hljs-string">&quot;在Sql sever中根据Id得到Department 表一条记录&quot;</span>);<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>AccessDeapartment类，用于访问Acces的Department.</p></blockquote><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs c#"><span class="hljs-keyword">class</span> <span class="hljs-title">AccessDepartment</span> :<span class="hljs-title">IDepartment</span><br>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">Insert</span>(<span class="hljs-params">Department department</span>)</span><br>    &#123;<br>        Console.WriteLine(<span class="hljs-string">&quot;在Acess中给Department 表增加一条记录&quot;</span>);<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> Department <span class="hljs-title">GetDepartment</span>(<span class="hljs-params"><span class="hljs-built_in">int</span> id</span>)</span><br>    &#123;<br>        Console.WriteLine(<span class="hljs-string">&quot;在Acess中根据Id得到Department 表一条记录&quot;</span>);<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>IFactory接口，定义一个创建访问User表对象的抽象的工厂接口</p></blockquote><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs C#"><span class="hljs-keyword">interface</span> <span class="hljs-title">IFactory</span><br>&#123;<br>    <span class="hljs-function">IUser <span class="hljs-title">CreateUser</span>()</span>;<br>    <span class="hljs-function">IDepartment <span class="hljs-title">CreateDepartment</span>()</span>;<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>SqlSeverFactory类，实现IFactory接口，实现SqlseverUser和SqlserverDepartment</p></blockquote><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs C#"><span class="hljs-keyword">class</span> <span class="hljs-title">SqlseverFactory</span>:<span class="hljs-title">IFactory</span><br>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> IUser <span class="hljs-title">CreateUser</span>()</span><br>    &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> SqlseverUser();<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> IDepartment <span class="hljs-title">CreateDepartment</span>()</span><br>    &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> SqlseverDepartment();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>AccessFactory类，实现IFactory接口，实现AccessrUser和AccessDepartment</p></blockquote><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs C#"><span class="hljs-keyword">class</span> <span class="hljs-title">AccessFactory</span>:<span class="hljs-title">IFactory</span><br>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> IUser <span class="hljs-title">CreateUser</span>()</span><br>    &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> AccessrUser();<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> IDepartment <span class="hljs-title">CreateDepartment</span>()</span><br>    &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> AccessDepartment();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>客户端代码</p></blockquote><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs C#"><span class="hljs-function"><span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">Main</span>(<span class="hljs-params"><span class="hljs-built_in">string</span>[] args</span>)</span><br>&#123;<br>    User user = <span class="hljs-keyword">new</span> User();<br>    Department dept=<span class="hljs-keyword">new</span> Department();<br>    <span class="hljs-comment">//IFactory factory= new SqlseverFactory();</span><br>    IFactory factory= <span class="hljs-keyword">new</span> AccessFactory();<br>    <br>    IUser iu=factory.CreateUser();<br>    <br>    iu.Insert(user);<br>    iu.GetUser(dept);<br>    id.GetDepartment(<span class="hljs-number">1</span>);<br>    <br>    Console.Read();<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/MCIBlueMoon/PicGO_Img/main/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E6%8A%BD%E8%B1%A1%E6%96%B9%E6%B3%95%E7%BB%93%E6%9E%84%E5%9B%BE.png"></p><h4 id="4、优点与缺点-2"><a href="#4、优点与缺点-2" class="headerlink" title="4、优点与缺点"></a>4、优点与缺点</h4><p>​<strong>1.主要优点</strong></p><p>​    抽象工厂模式的主要优点如下：</p><p>​    (1) 抽象工厂模式隔离了具体类的生成，使得客户并不需要知道什么被创建。由于这种隔离，更换一个具体工厂就变得相对容易，所有的具体工厂都实现了抽象工厂中定义的那些公共接口，因此只需改变具体工厂的实例，就可以在某种程度上改变整个软件系统的行为。</p><p>​    (2) 当一个产品族中的多个对象被设计成一起工作时，它能够保证客户端始终只使用同一个产品族中的对象。</p><p>​    (3) 增加新的产品族很方便，无须修改已有系统，符合“开闭原则”。</p><p>​    <strong>2. 主要缺点</strong></p><p>​    抽象工厂模式的主要缺点如下：</p><p>​    增加新的产品等级结构麻烦，需要对原有系统进行较大的修改，甚至需要修改抽象层代码，这显然会带来较大的不便，违背了“开闭原则”。</p><h4 id="5、总结-1"><a href="#5、总结-1" class="headerlink" title="5、总结"></a>5、总结</h4><p><strong>抽象工厂模式</strong>，提供一个创建一系列相关或相互依赖对象的接口，而无需指定他们具体的类。</p><hr><h3 id="④单例设计模式"><a href="#④单例设计模式" class="headerlink" title="④单例设计模式"></a>④单例设计模式</h3><h4 id="1、引言-3"><a href="#1、引言-3" class="headerlink" title="1、引言"></a>1、引言</h4><p>​单例”字面意思上理解为——一个类只有一个实例，所以单例模式也就是<font color="FF0000"><strong>保证一个类只有一个实例的一种实现方法</strong></font>，单例模式的一个官方定义：<strong>确保一个类只有一个实例,并提供一个全局访问点。</strong></p><h4 id="2、单例设计模式介绍"><a href="#2、单例设计模式介绍" class="headerlink" title="2、单例设计模式介绍"></a>2、单例设计模式介绍</h4><p>​<strong>单例模式（Singleton）</strong>，保证一个类仅有一个实例，并提供一个访问它的全局访问点。</p><p>​“通常我们可以让一个全局变量是的一个对象被访问，但它不能防止你实例化多个对象。一个最好办法就是，让类自身负责保存它的唯一实例。这个类可以保证有没有其他实例可以被创建，并且它可以提供一个访问该实例的方法。</p><p>​<strong>单例模式因为Singleton类封装它的唯一实例，这样它可以严格控制客户怎样访问它以及何时访问它。简单地说就是对唯一实例的受控访问。</strong></p><h4 id="3、实现-3"><a href="#3、实现-3" class="headerlink" title="3、实现"></a>3、实现</h4><p><img src="https://raw.githubusercontent.com/MCIBlueMoon/PicGO_Img/main/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F%E7%BB%93%E6%9E%84%E5%9B%BE.png"></p><blockquote><p>Singleton类，定义一个GetInstance操作，允许客户访问它的唯一实例。GetInstance 是一个静态方法，主要负责创建自己的唯一实例。</p></blockquote><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs C#"><span class="hljs-keyword">class</span> <span class="hljs-title">Singleton</span><br>&#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> Singleton instance;<br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-title">Singleton</span>()</span><br>    &#123;<br>        <span class="hljs-comment">//构造方法让其private,这就毒死了外界利用new创建此类实例的可能</span><br>    &#125;<br>    <br>    <span class="hljs-comment">//此方法是获得本类实例的唯一全局访问点</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Singleton <span class="hljs-title">GetInstance</span>()</span><br>    &#123;<br>        <span class="hljs-comment">//若实例不存在，则new一个新实例，否则返回已有的实例</span><br>        <span class="hljs-keyword">if</span>(instance == <span class="hljs-literal">null</span>)<br>        &#123;<br>            instance = <span class="hljs-keyword">new</span> Sington();<br>        &#125;<br>        <span class="hljs-keyword">return</span> instacne;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>客户端代码</p></blockquote><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs C#"><span class="hljs-function"><span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">Main</span>(<span class="hljs-params"><span class="hljs-built_in">string</span>[] args</span>)</span><br>&#123;<br>    Singleton s1 = Singleton.GetInstance();<br>    Singleton s2 = Singleton.GetInstance();<br>    <br>    <span class="hljs-keyword">if</span>(s1==s2)<br>    &#123;<br>        Console.WriteLine(<span class="hljs-string">&quot;两个对象是相同的实例&quot;</span>);<br>    &#125;<br>    Console.Read();<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="4、多线程使用单例模式所引发的问题"><a href="#4、多线程使用单例模式所引发的问题" class="headerlink" title="4、多线程使用单例模式所引发的问题"></a>4、多线程使用单例模式所引发的问题</h4><p>上面的单例模式的实现在单线程下确实是完美的,然而在多线程的情况下会得到多个Singleton实例,因为在两个线程同时运行GetInstance方法时，此时两个线程判断(uniqueInstance &#x3D;&#x3D;null)这个条件时都返回真，此时两个线程就都会创建Singleton的实例，这样就违背了我们单例模式初衷了，既然上面的实现会运行多个线程执行，那<strong>我们对于多线程的解决方案自然就是使GetInstance方法在同一时间只运行一个线程运行就好了</strong></p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs c#"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title">Singleton</span><br>    &#123;<br>        <span class="hljs-comment">// 定义一个静态变量来保存类的实例</span><br>        <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> Singleton uniqueInstance;<br><br>        <span class="hljs-comment">// 定义一个标识确保线程同步</span><br>        <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">readonly</span> <span class="hljs-built_in">object</span> locker = <span class="hljs-keyword">new</span> <span class="hljs-built_in">object</span>();<br><br>        <span class="hljs-comment">// 定义私有构造函数，使外界不能创建该类实例</span><br>        <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-title">Singleton</span>()</span><br>        &#123;<br>        &#125;<br><br>        <span class="hljs-comment"><span class="hljs-doctag">///</span> <span class="hljs-doctag">&lt;summary&gt;</span></span><br>        <span class="hljs-comment"><span class="hljs-doctag">///</span> 定义公有方法提供一个全局访问点,同时你也可以定义公有属性来提供全局访问点</span><br>        <span class="hljs-comment"><span class="hljs-doctag">///</span> <span class="hljs-doctag">&lt;/summary&gt;</span></span><br>       <br>        <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Singleton <span class="hljs-title">GetInstance</span>()</span><br>        &#123;<br>            <span class="hljs-comment">// 当第一个线程运行到这里时，此时会对locker对象 &quot;加锁&quot;，</span><br>            <span class="hljs-comment">// 当第二个线程运行该方法时，首先检测到locker对象为&quot;加锁&quot;状态，该线程就会挂起等待第一个线程解锁</span><br>            <span class="hljs-comment">// lock语句运行完之后（即线程运行完之后）会对该对象&quot;解锁&quot;</span><br>            <span class="hljs-keyword">lock</span> (locker)<br>            &#123;<br>                <span class="hljs-comment">// 如果类的实例不存在则创建，否则直接返回</span><br>                <span class="hljs-keyword">if</span> (uniqueInstance == <span class="hljs-literal">null</span>)<br>                &#123;<br>                    uniqueInstance = <span class="hljs-keyword">new</span> Singleton();<br>                &#125;<br>            &#125;<br><br>            <span class="hljs-keyword">return</span> uniqueInstance;<br>        &#125;<br>    &#125;<br></code></pre></td></tr></table></figure><p>上面这种解决方案确实可以解决多线程的问题,但是**上面代码对于每个线程都会对线程辅助对象locker加锁之后再判断实例是否存在，对于这个操作完全没有必要的，因为当第一个线程创建了该类的实例之后，后面的线程此时只需要直接判断（uniqueInstance&#x3D;&#x3D;null）为假，此时完全没必要对线程辅助对象加锁之后再去判断，所以上面的实现方式增加了额外的开销，损失了性能，为了改进上面实现方式的缺陷，我们只需要在lock语句前面加一句（uniqueInstance&#x3D;&#x3D;null）的判断就可以避免锁所增加的额外开销，这种实现方式我们就叫它 <font color="FF0000">“双重锁定”</font>**，下面具体看看实现代码的：</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs C#"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title">Singleton</span><br>   &#123;<br>       <span class="hljs-comment">// 定义一个静态变量来保存类的实例</span><br>       <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> Singleton uniqueInstance;<br><br>       <span class="hljs-comment">// 定义一个标识确保线程同步</span><br>       <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">readonly</span> <span class="hljs-built_in">object</span> locker = <span class="hljs-keyword">new</span> <span class="hljs-built_in">object</span>();<br><br>       <span class="hljs-comment">// 定义私有构造函数，使外界不能创建该类实例</span><br>       <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-title">Singleton</span>()</span><br>       &#123;<br>       &#125;<br><br>       <span class="hljs-comment"><span class="hljs-doctag">///</span> <span class="hljs-doctag">&lt;summary&gt;</span></span><br>       <span class="hljs-comment"><span class="hljs-doctag">///</span> 定义公有方法提供一个全局访问点,同时你也可以定义公有属性来提供全局访问点</span><br>       <span class="hljs-comment"><span class="hljs-doctag">///</span> <span class="hljs-doctag">&lt;/summary&gt;</span></span><br>       <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Singleton <span class="hljs-title">GetInstance</span>()</span><br>       &#123;<br>           <span class="hljs-comment">// 当第一个线程运行到这里时，此时会对locker对象 &quot;加锁&quot;，</span><br>           <span class="hljs-comment">// 当第二个线程运行该方法时，首先检测到locker对象为&quot;加锁&quot;状态，该线程就会挂起等待第一个线程解锁</span><br>           <span class="hljs-comment">// lock语句运行完之后（即线程运行完之后）会对该对象&quot;解锁&quot;</span><br>           <span class="hljs-comment">// 双重锁定只需要一句判断就可以了</span><br>           <span class="hljs-keyword">if</span> (uniqueInstance == <span class="hljs-literal">null</span>)<br>           &#123;<br>               <span class="hljs-keyword">lock</span> (locker)<br>               &#123;<br>                   <span class="hljs-comment">// 如果类的实例不存在则创建，否则直接返回</span><br>                   <span class="hljs-keyword">if</span> (uniqueInstance == <span class="hljs-literal">null</span>)<br>                   &#123;<br>                       uniqueInstance = <span class="hljs-keyword">new</span> Singleton();<br>                   &#125;<br>               &#125;<br>           &#125;<br>           <span class="hljs-keyword">return</span> uniqueInstance;<br>       &#125;<br>   &#125;<br></code></pre></td></tr></table></figure><h4 id="5、C-中实现了单例模式的类"><a href="#5、C-中实现了单例模式的类" class="headerlink" title="5、C#中实现了单例模式的类"></a>5、C#中实现了单例模式的类</h4><p>经过查看，.NET类库中确实存在单例模式的实现类，不过该类不是公开的，下面就具体看看该类的一个实现的(该类具体存在于System.dll程序集，命名空间为System,可以用反射工具Reflector去查看源码的):</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs C#"><span class="hljs-keyword">internal</span> <span class="hljs-keyword">sealed</span> <span class="hljs-keyword">class</span> <span class="hljs-title">SR</span><br>    &#123;<br>        <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> SR loader;<br>        <span class="hljs-function"><span class="hljs-keyword">internal</span> <span class="hljs-title">SR</span>()</span><br>        &#123;<br>        &#125;<br>        <span class="hljs-comment">// 主要是因为该类不是公有，所以这个全部访问点也定义为私有的了</span><br>        <span class="hljs-comment">// 但是思想还是用到了单例模式的思想的</span><br>        <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> SR <span class="hljs-title">GetLoader</span>()</span><br>        &#123;<br>            <span class="hljs-keyword">if</span> (loader == <span class="hljs-literal">null</span>)<br>            &#123;<br>                SR sr = <span class="hljs-keyword">new</span> SR();<br>                Interlocked.CompareExchange&lt;SR&gt;(<span class="hljs-keyword">ref</span> loader, sr, <span class="hljs-literal">null</span>);<br>            &#125;<br>            <span class="hljs-keyword">return</span> loader;<br>        &#125;<br><br>        <span class="hljs-comment">// 这个公有方法中调用了GetLoader方法的</span><br>        <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-built_in">object</span> <span class="hljs-title">GetObject</span>(<span class="hljs-params"><span class="hljs-built_in">string</span> name</span>)</span><br>        &#123;<br>            SR loader = GetLoader();<br>            <span class="hljs-keyword">if</span> (loader == <span class="hljs-literal">null</span>)<br>            &#123;<br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>            &#125;<br>            <span class="hljs-keyword">return</span> loader.resources.GetObject(name, Culture);<br>        &#125;<br>    &#125;<br></code></pre></td></tr></table></figure><h4 id="6、总结"><a href="#6、总结" class="headerlink" title="6、总结"></a>6、总结</h4><p><strong>单例模式（Singleton）</strong>，保证一个类仅有一个实例，并提供一个访问它的全局访问点。</p><hr><h3 id="⑤原型设计模式"><a href="#⑤原型设计模式" class="headerlink" title="⑤原型设计模式"></a>⑤原型设计模式</h3><h4 id="1、引言-4"><a href="#1、引言-4" class="headerlink" title="1、引言"></a>1、引言</h4><p>​在软件系统中，当创建一个类的实例的过程很昂贵或很复杂，并且我们需要创建多个这样类的实例时，如果我们用new操作符去创建这样的类实例，这未免会增加创建类的复杂度和耗费更多的内存空间，因为这样在内存中分配了多个一样的类实例对象，然后如果采用工厂模式来创建这样的系统的话，随着产品类的不断增加，导致子类的数量不断增多，反而增加了系统复杂程度，所以在这里使用工厂模式来封装类创建过程并不合适，然而原型模式可以很好地解决这个问题，因为每个类实例都是相同的，当我们需要多个相同的类实例时，没必要每次都使用new运算符去创建相同的类实例对象，此时我们一般思路就是想——只创建一个类实例对象，如果后面需要更多这样的实例，可以通过对原来对象拷贝一份来完成创建，这样在内存中不需要创建多个相同的类实例，从而减少内存的消耗和达到类实例的复用。然而这个思路正是<strong>原型模式</strong>的实现方式。</p><h4 id="2、原型设计模式介绍"><a href="#2、原型设计模式介绍" class="headerlink" title="2、原型设计模式介绍"></a>2、原型设计模式介绍</h4><p><strong>原型模式（prototype）</strong>，用原型实例指定创建对象的种类，并且通过拷贝这些原型创建新的对象</p><p>在现实生活中，也有很多原型设计模式的例子，例如，细胞分裂的过程，一个细胞的有丝分裂产生两个相同的细胞；还有西游记中孙悟空变出后孙的本领和火影忍者中鸣人的隐分身忍术，写多份简历等。</p><h4 id="3、实现-4"><a href="#3、实现-4" class="headerlink" title="3、实现"></a>3、实现</h4><p><img src="https://raw.githubusercontent.com/MCIBlueMoon/PicGO_Img/main/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E5%8E%9F%E5%9E%8B%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E7%BB%93%E6%9E%84%E5%9B%BE.png"></p><blockquote><p>原型类</p></blockquote><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs C#"><span class="hljs-keyword">abstract</span> <span class="hljs-keyword">class</span> <span class="hljs-title">Prototype</span><br>&#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-built_in">string</span> id;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Prototype</span>(<span class="hljs-params"><span class="hljs-built_in">string</span> id</span>)</span><br>    &#123;<br>        <span class="hljs-keyword">this</span>.id=id;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-built_in">string</span> Id<br>    &#123;<br>        <span class="hljs-keyword">get</span>&#123;<span class="hljs-keyword">return</span> id;&#125;<br>    &#125;<br>    <br>    <span class="hljs-comment">//抽象类的关键就是有这样一个Clone方法</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> Prototype <span class="hljs-title">Clone</span>()</span>;<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>具体原型类</p></blockquote><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs c#"><span class="hljs-keyword">class</span> <span class="hljs-title">ConcretePrototype</span> : <span class="hljs-title">Prototype</span><br>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">ConcretePrototype</span>(<span class="hljs-params"><span class="hljs-built_in">string</span> id</span>):<span class="hljs-title">base</span>(<span class="hljs-params">id</span>)</span><br>    &#123;<br>        <br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">override</span> Prototype <span class="hljs-title">clone</span>()</span><br>    &#123;<br>        <span class="hljs-comment">//创建当前对象的浅表副本。方法时创建一个新对象，然后将当前对象的非静态字段复制到该新对象。如果字段时值类型的，则对该字段执行逐位复制。如果字段是引用类型，则复制引用但不复制引用的对象；因此，原始对象及其副本引用同一对象</span><br>        <span class="hljs-keyword">return</span> (Prototype)<span class="hljs-keyword">this</span>.MemberWiseClone();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>客户端代码</p></blockquote><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs C#"><span class="hljs-function"><span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">Main</span>(<span class="hljs-params"><span class="hljs-built_in">string</span>[] args</span>)</span><br>&#123;<br>    ConcretePrototype p1= <span class="hljs-keyword">new</span> ConcretePrototype(<span class="hljs-string">&quot;I&quot;</span>);<br>    <span class="hljs-comment">//克隆类ConcretePrototype的对象p1就能得到新得实例c1</span><br>    ConcretePrototype c1= <span class="hljs-keyword">new</span> (ConcretePrototype)p1.Clone();<br>    Console.WriteLine(<span class="hljs-string">&quot;Clonded:&#123;0&#125;&quot;</span>,c1.Id);<br>    Console.Read();<br>    <br>&#125;<br></code></pre></td></tr></table></figure><h4 id="4、浅拷贝和深拷贝"><a href="#4、浅拷贝和深拷贝" class="headerlink" title="4、浅拷贝和深拷贝"></a>4、浅拷贝和深拷贝</h4><p><strong>MemberwiseClone</strong>方法创建一个<strong>浅表副本</strong>，方法是创建一个新对象，然后将当前对象的非静态字段复制到该新对象。如果字段是<strong>值类型的，则对该字段执行逐位复制</strong>。如果字段是<strong>引用类型，则复制引用单不复制引用的对象</strong>；因此原始对象及其副本引用同一对象。</p><p>例如，考虑引用对象A和B的被称为X的对象。对象B依次引用对象C。X的浅表副本创建一个新对象X2，该对象也引用对象A和B。相比而言，X的深层副本创建一个新对象X2，该对象引用新对象A2和B2（人别为A和B的副本）。B2有引用新对象C2，C2是C的副本。该实例阐释了千层和深层复制操作之间的区别。</p><p>有很多方法可以实现深层复制操作，前提是浅表赋值操作有MemberwiseClone方法执行但不符合您的要求。这些要求包括：</p><ul><li>调用要复制的对象的构造函数以创建含有从第一个对象中提出的属性值的第二个对象。这假定对象的值完全由类构造函数定义。</li><li>调用MemberwiseClone方法创建的对象的浅表副本，然后将指定新的对象，其值均相同，院士对象的任何属性或字段的值是引用类型。该实例中的DeepCopy方法阐释了这种方法。</li><li>序列化要深层复制的对象，然后将序列化的数据还原到另一个对象变量。</li><li>使用带递归的反射执行的深层复制操作。</li></ul><p>下面的实力掩饰MemberwiseClone方法。它定义了ShallowCopy方法，该方法通过调用MemberwiseClone方法来在Person对象上执行浅表复制操作。他还定义了在Person对象上执行深层复制操作的DeepCopy方法。</p><p><strong>深拷贝</strong>把引用对象的变量指向复制过的新对象，而不是原有的被引用的对象。</p><div align="center"><b>简历的深拷贝复制实现</b></div><p><img src="https://raw.githubusercontent.com/MCIBlueMoon/PicGO_Img/main/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E5%8E%9F%E5%9E%8B%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E6%B7%B1%E6%8B%B7%E8%B4%9D.png"></p><blockquote><p>工作经历类</p></blockquote><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs C#"><span class="hljs-comment">//让工作经历实现ICloneable接口</span><br><span class="hljs-keyword">class</span> <span class="hljs-title">WorkExperinece</span>:<span class="hljs-title">ICloneable</span><br>&#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-built_in">string</span> workDate;<br>    <span class="hljs-keyword">public</span> <span class="hljs-built_in">string</span> WorkDate<br>    &#123;<br>        <span class="hljs-keyword">get</span>;<br>        <span class="hljs-keyword">set</span>;<br>    &#125;<br>    <span class="hljs-keyword">private</span> <span class="hljs-built_in">string</span> company;<br>    <span class="hljs-keyword">public</span> <span class="hljs-built_in">string</span> Company<br>    &#123;<br>        <span class="hljs-keyword">get</span>;<br>        <span class="hljs-keyword">set</span>;<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> Object <span class="hljs-title">Clone</span>()</span><br>    &#123;<br>        <span class="hljs-comment">//&quot;工作经历&quot;类实现克隆方法</span><br>        <span class="hljs-keyword">return</span> (Object)<span class="hljs-keyword">this</span>.MemberwiseColne();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>简历类</p></blockquote><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><code class="hljs C#"><span class="hljs-keyword">class</span> <span class="hljs-title">Resume</span> : <span class="hljs-title">Icloneable</span><br>&#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-built_in">string</span> name;<br>    <span class="hljs-keyword">private</span> <span class="hljs-built_in">string</span> sex;<br>    <span class="hljs-keyword">private</span> <span class="hljs-built_in">string</span> age;<br>    <span class="hljs-keyword">private</span> Workexperience work;<br>    <br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Resume</span>(<span class="hljs-params"><span class="hljs-built_in">string</span> name</span>)</span><br>    &#123;<br>        <span class="hljs-keyword">this</span>.name=name;<br>        work=<span class="hljs-keyword">new</span> WorkExperience();<br>    &#125;<br>     <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Resume</span>(<span class="hljs-params">WorkExperience work</span>)</span><br>    &#123;<br>        <span class="hljs-comment">//提供Clone方法调用的私有构造函数，以便克隆&quot;工作经历&quot;的数据</span><br>        <span class="hljs-keyword">this</span>.work=(WorkExperience)work.Clone();<br>    &#125;<br>    <span class="hljs-comment">//设置个人信息</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">SetPersonalInfo</span>(<span class="hljs-params"><span class="hljs-built_in">string</span> sex,<span class="hljs-built_in">string</span> age</span>)</span><br>    &#123;<br>        <span class="hljs-keyword">this</span>.sex=sex;<br>        <span class="hljs-keyword">this</span>.age=age;<br>    &#125;<br>    <span class="hljs-comment">//设置工作经历</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">SetWorkExperience</span>(<span class="hljs-params"><span class="hljs-built_in">string</span> workDate,<span class="hljs-built_in">string</span> company</span>)</span><br>    &#123;<br>        work.WorkDate=workDate;<br>        work.Company=company<br>    &#125;<br>    <span class="hljs-comment">//显示</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">Display</span>()</span><br>    &#123;<br>        Console.WriteLine(<span class="hljs-string">&quot;&#123;0&#125;&#123;1&#125;&#123;2&#125;&quot;</span>,name,sex,gae);<br>        Console.WriteLine(<span class="hljs-string">&quot;工作经历：&#123;0&#125;&#123;1&#125;&quot;</span>,work.WorkDate,work.Company);<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">//调用私有的构造方法，让“工作经历”克隆完成，然后再给这个“简历”对象的相关字段赋值，最终返回一个深拷贝的简历对象</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> Object <span class="hljs-title">Clone</span>()</span><br>&#123;<br>    Resume obj=<span class="hljs-keyword">new</span> Resume(<span class="hljs-keyword">this</span>.work);<br>    obj.name=<span class="hljs-keyword">this</span>.name;<br>    obj.sex=<span class="hljs-keyword">this</span>.sex;<br>    obj.age=<span class="hljs-keyword">this</span>.age;<br>    <span class="hljs-keyword">return</span> obj;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="5、优点和缺点"><a href="#5、优点和缺点" class="headerlink" title="5、优点和缺点"></a>5、优点和缺点</h4><p><strong>原型模式的优点有：</strong></p><ol><li>原型模式向客户隐藏了创建新实例的复杂性</li><li>原型模式允许动态增加或较少产品类。</li><li>原型模式简化了实例的创建结构，工厂方法模式需要有一个与产品类等级结构相同的等级结构，而原型模式不需要这样。</li><li>产品类不需要事先确定产品的等级结构，因为原型模式适用于任何的等级结构</li></ol><p><strong>原型模式的缺点有：</strong></p><ol><li>每个类必须配备一个克隆方法</li><li>配备克隆方法需要对类的功能进行通盘考虑，这对于全新的类不是很难，但对于已有的类不一定很容易，特别当一个类引用不支持串行化的间接对象，或者引用含有循环结构的时候。</li></ol><h4 id="6、总结-1"><a href="#6、总结-1" class="headerlink" title="6、总结"></a>6、总结</h4><p><strong>原型模式（prototype）</strong>，用原型实例指定创建对象的种类，并且通过拷贝这些原型创建新的对象</p><hr><h3 id="⑥建造者设计模式"><a href="#⑥建造者设计模式" class="headerlink" title="⑥建造者设计模式"></a>⑥建造者设计模式</h3><h4 id="1、引言-5"><a href="#1、引言-5" class="headerlink" title="1、引言"></a>1、引言</h4><p>​在软件系统中，有时需要创建一个复杂对象，并且这个复杂对象由其各部分子对象通过一定的步骤组合而成。例如一个采购系统中，如果需要采购员去采购一批电脑时，在这个实际需求中，电脑就是一个复杂的对象，它是由CPU、主板、硬盘、显卡、机箱等组装而成的，如果此时让采购员一台一台电脑去组装的话真是要累死采购员了，这里就可以采用建造者模式来解决这个问题，我们可以把电脑的各个组件的组装过程封装到一个建造者类对象里，建造者只要负责返还给客户端全部组件都建造完毕的产品对象就可以了。然而现实生活中也是如此的，如果公司要采购一批电脑，此时采购员不可能自己去买各个组件并把它们组织起来，此时采购员只需要像电脑城的老板说自己要采购什么样的电脑就可以了，电脑城老板自然会把组装好的电脑送到公司。</p><h4 id="2、建造者设计模式介绍"><a href="#2、建造者设计模式介绍" class="headerlink" title="2、建造者设计模式介绍"></a>2、建造者设计模式介绍</h4><p>​如果需要<strong>将一个复杂对象的构建与它的表示分离，使得同样的构建过程可以创建不同的表示</strong>的意图的时候，我们需要应用于一个设计模式，‘<strong>建造者（Builder）模式</strong>’，又称叫生成器模式叫生成器模式。建造者模式可以将一个产品的内部表象与产品的生成过程分割开来，从而可以使一个建造过程生成具有不同的内部表象的产品对象。<strong>如果我们用了建造者模式，那么用户就只需指定需要建造的类型就可以得到它们，而具体建造的过程和细节就不需知道了</strong>。</p><p>​<strong>建造者模式是在当创建复杂对象的算法应该独立于该对象的组成部分以及它们的装配方法时适用的模式</strong></p><h4 id="3、实现-5"><a href="#3、实现-5" class="headerlink" title="3、实现"></a>3、实现</h4><p><img src="https://raw.githubusercontent.com/MCIBlueMoon/PicGO_Img/main/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E5%BB%BA%E9%80%A0%E8%80%85%E7%BB%93%E6%9E%84%E5%9B%BE.png"></p><blockquote><p>Product类——产品类，由多个部件组成</p></blockquote><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs C#"><span class="hljs-keyword">class</span> <span class="hljs-title">Product</span><br>&#123;<br>    IList&lt;<span class="hljs-built_in">string</span>&gt; parts=<span class="hljs-keyword">new</span> List&lt;<span class="hljs-built_in">string</span>&gt;();<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">add</span>(<span class="hljs-params"><span class="hljs-built_in">string</span> part</span>)</span><br>    &#123;<br>    parts.Add(part);    <br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">Show</span>()</span><br>    &#123;<br>        Console.WriteLine(<span class="hljs-string">&quot;\n 产品 创建 ——&quot;</span>);<br>        <span class="hljs-keyword">foreach</span>(<span class="hljs-built_in">string</span> part <span class="hljs-keyword">in</span> parts)<br>        &#123;<br>            Console.WriteLine(part);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>Bulider类——抽象建造者类，确定产品由两个部件PartA和PartB组成，并声明一个得到产品建造后结果的方法GetResult</p></blockquote><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs C#"><span class="hljs-keyword">abstract</span> <span class="hljs-keyword">class</span> <span class="hljs-title">Builder</span><br>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-keyword">void</span> <span class="hljs-title">BuildPartA</span>()</span>;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-keyword">void</span> <span class="hljs-title">BulidPartB</span>()</span>;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> Product <span class="hljs-title">GetResult</span>()</span>;<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>ConcreteBuilder类——具体建造者类</p></blockquote><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs C#"><span class="hljs-keyword">class</span> <span class="hljs-title">ConcreteBuilder</span> :<span class="hljs-title">Builder</span><br>&#123;<br>    <span class="hljs-keyword">private</span> Product porduct =<span class="hljs-keyword">new</span> Product();<br>    <br>    <span class="hljs-comment">//建造具体的两个部件A和B</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">override</span> <span class="hljs-keyword">void</span> <span class="hljs-title">BuildPartA</span>()</span><br>    &#123;<br>        product.Add(<span class="hljs-string">&quot;部件A&quot;</span>);<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">override</span> <span class="hljs-keyword">void</span> <span class="hljs-title">BuildPartB</span>()</span><br>    &#123;<br>        product.Add(<span class="hljs-string">&quot;部件B&quot;</span>);<br>    &#125;<br>    <br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">override</span> Product <span class="hljs-title">GetResult</span>()</span><br>    &#123;<br>        <span class="hljs-keyword">return</span> product;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>ConcreteBuilder2类——具体建造者类</p></blockquote><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs c#"><span class="hljs-keyword">class</span> <span class="hljs-title">ConcreteBuilder2</span> :<span class="hljs-title">Builder</span><br>&#123;<br>    <span class="hljs-keyword">private</span> Product porduct =<span class="hljs-keyword">new</span> Product();<br>    <br>    <span class="hljs-comment">//建造具体的两个部件A和B</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">override</span> <span class="hljs-keyword">void</span> <span class="hljs-title">BuildPartA</span>()</span><br>    &#123;<br>        product.Add(<span class="hljs-string">&quot;部件X&quot;</span>);<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">override</span> <span class="hljs-keyword">void</span> <span class="hljs-title">BuildPartB</span>()</span><br>    &#123;<br>        product.Add(<span class="hljs-string">&quot;部件Y&quot;</span>);<br>    &#125;<br>    <br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">override</span> Product <span class="hljs-title">GetResult</span>()</span><br>    &#123;<br>        <span class="hljs-keyword">return</span> product;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>Director类——指挥者类</p></blockquote><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs C#"><span class="hljs-keyword">class</span> <span class="hljs-title">Director</span><br>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">Coonstruct</span>(<span class="hljs-params">Builder builder</span>)</span><br>    &#123;<br>        <span class="hljs-comment">//用来指挥建造过程</span><br>        builder.BuildPartA();<br>        builder.BuildPartB();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>客户端代码，客户不需知道具体的建造过程</p></blockquote><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs C#"><span class="hljs-function"><span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">Main</span>(<span class="hljs-params"><span class="hljs-built_in">string</span>[] args</span>)</span><br>&#123;<br>    Director dircetor =<span class="hljs-keyword">new</span> Dircetor();<br>    Builder b1 = <span class="hljs-keyword">new</span> ConcreteBuilder1();<br>    Builder b2 = <span class="hljs-keyword">new</span> ConcreteBuilder2();<br>    <br>    <span class="hljs-comment">//指挥者用ConcreteBuilder1和ConcreteBuilder2的方法来建造产品</span><br>    director.Construct(b1);<br>    Product p1 = b1.GetResult();<br>    p1.Show();<br>    <br>    director.Construct(b2);<br>    Product p2 = b2.GetResult();<br>    p2.Show();<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="4、总结"><a href="#4、总结" class="headerlink" title="4、总结"></a>4、总结</h4><p><strong>建造者（Builder）模式</strong>，将一个复杂对象的构建与它的表示分离，使得同样的构建过程可以创建不同的表示</p><hr><h2 id="二、结构型设计模式"><a href="#二、结构型设计模式" class="headerlink" title="二、结构型设计模式"></a>二、结构型设计模式</h2><h2 id="三、行为型设计模式"><a href="#三、行为型设计模式" class="headerlink" title="三、行为型设计模式"></a>三、行为型设计模式</h2>]]></content>
    
    
    <categories>
      
      <category>编程语言</category>
      
    </categories>
    
    
    <tags>
      
      <tag>CSharp</tag>
      
      <tag>设计模式</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Unity 生命周期</title>
    <link href="/2022/06/05/Unity%E8%84%9A%E6%9C%AC%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F/"/>
    <url>/2022/06/05/Unity%E8%84%9A%E6%9C%AC%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F/</url>
    
    <content type="html"><![CDATA[<h1 id="Unity生命周期"><a href="#Unity生命周期" class="headerlink" title="Unity生命周期"></a>Unity生命周期</h1><h3 id="Unity生命周期图"><a href="#Unity生命周期图" class="headerlink" title="Unity生命周期图"></a>Unity生命周期图</h3><p><img src="https://raw.githubusercontent.com/MCIBlueMoon/PicGO_Img/main/06-05/Unity%E8%84%9A%E6%9C%AC%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F.png"></p><h3 id="Reset"><a href="#Reset" class="headerlink" title="Reset"></a>Reset</h3><p><strong>Reset</strong> 是当Scripts第一次绑定到物体上或者点击Reset按钮的时候会触发，且只在Editor的模式下触发，游戏打包的时候并不会触发。</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs c#"><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">Reset</span>()</span><br>&#123;<br>    <br>&#125;<br></code></pre></td></tr></table></figure><h3 id="Awake"><a href="#Awake" class="headerlink" title="Awake"></a>Awake</h3><p><strong>Awake</strong> 是当脚本实例在游戏运行被载入的时候运行，一般为了初始化游戏变量和游戏状态，注意，无论函数是否被激活，Awake 都会执行。</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs c#"><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">Awake</span>()</span><br>&#123;<br>    <br>&#125;<br></code></pre></td></tr></table></figure><h3 id="OnEable"><a href="#OnEable" class="headerlink" title="OnEable"></a>OnEable</h3><p><strong>OnEable</strong> 是在游戏对象是可激活状态的时候会调用</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs C#"><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">OnEable</span>()</span><br>&#123;<br>    <br>&#125;<br></code></pre></td></tr></table></figure><h3 id="Start"><a href="#Start" class="headerlink" title="Start"></a>Start</h3><p><strong>Start</strong> 也是为了初始化变量的方法但是和 <strong>Awake</strong> 有些许的不同</p><p>首先，<strong>Awake</strong> 是在项目初始化的时候被调用的，但是 <strong>Start</strong> 可能在初始之后调用，所有如果把一些状态放在 <strong>Start</strong> 中进行初始化，会很不安全，因为可能会有别的函数在 <strong>Start</strong> 之前就被执行，造成一些空引用的问题。</p><p>其次，如果对象不是处于激活状态，<strong>Start</strong> 是不会被调用的，而 <strong>Awake</strong> 无论是不是激活都会被引用。</p><p><strong>所以，建议把所有初始化都放在Awake上</strong></p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs C#"><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">Start</span>()</span><br>&#123;<br>    <br>&#125;<br></code></pre></td></tr></table></figure><h3 id="FixedUpdate"><a href="#FixedUpdate" class="headerlink" title="FixedUpdate"></a>FixedUpdate</h3><p>Unity 建议，把所有的物理行为的每帧更新的逻辑都应当放在 <strong>FixedUpdate</strong> 里，原因因为这个是固定间隔的帧执行的，而普通的 <strong>Update</strong> 每一帧之间的间隔是不固定的，不一样的，所以一般都希望物体上的力是均匀的，否则会出现卡顿的现象。</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs C#"><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">FixedUpdate</span>()</span><br>&#123;<br>    <br>&#125;<br></code></pre></td></tr></table></figure><h3 id="OnTrigger、OnCollison、OnMouse"><a href="#OnTrigger、OnCollison、OnMouse" class="headerlink" title="OnTrigger、OnCollison、OnMouse"></a>OnTrigger、OnCollison、OnMouse</h3><p>先处理 <strong>OnTrigger</strong> 触发器行为，再处理 <strong>OnCollison</strong> 碰撞体行为，在此处理 <strong>OnMouse</strong> 的点击鼠标，点击输入的行为.</p><p>这三个行为是完全连续的行为。</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs C#"><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">OnTrigger</span>()</span><br>&#123;<br>    <br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">OnCollison</span>()</span><br>&#123;<br>    <br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">OnMouse</span>()</span><br>&#123;<br>    <br>&#125;<br></code></pre></td></tr></table></figure><h3 id="Update"><a href="#Update" class="headerlink" title="Update"></a>Update</h3><p><strong>Update</strong> 是每一帧进行调用，是我们实现大部分游戏逻辑的方法.</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs C#"><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">Update</span>()</span><br>&#123;<br>    <br>&#125;<br></code></pre></td></tr></table></figure><h3 id="LateUpdate"><a href="#LateUpdate" class="headerlink" title="LateUpdate"></a>LateUpdate</h3><p><strong>LateUpdate</strong> 再所有 Update 方法执行之后执行，一般用于摄像机的跟随移动。</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs C#"><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">LateUpdate</span>()</span><br>&#123;<br>    <br>&#125;<br></code></pre></td></tr></table></figure><h3 id="OnGUI"><a href="#OnGUI" class="headerlink" title="OnGUI"></a>OnGUI</h3><p><strong>OnGUI</strong> 处理GUI数据，也是每一帧执行一次</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs C#"><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">OnGUI</span>()</span><br>&#123;<br>    <br>&#125;<br></code></pre></td></tr></table></figure><h3 id="OnDisable"><a href="#OnDisable" class="headerlink" title="OnDisable"></a>OnDisable</h3><p><strong>OnDisable</strong> 在对象被取消活跃状态的时候响应，和 <strong>OnEnable</strong> 相对应，但与此同时对象再次被激活的时候，<strong>OnEnable</strong> 也会再次响应。</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs C#"><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">OnDisable</span>()</span><br>&#123;<br>    <br>&#125;<br></code></pre></td></tr></table></figure><h3 id="OnDestory"><a href="#OnDestory" class="headerlink" title="OnDestory"></a>OnDestory</h3><p><strong>OnDestory</strong> 在对象被销毁的时候被调用，但是如果一开始对象就处于不激活状态然后被销毁了，就不会调用这个函数。</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs C#"><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">OnDisable</span>()</span><br>&#123;<br>    <br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>游戏编程</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Unity</tag>
      
      <tag>生命周期</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Unity 游戏AI之行为树</title>
    <link href="/2022/06/02/Unity%20AI%E4%B9%8B%E8%A1%8C%E4%B8%BA%E6%A0%91/"/>
    <url>/2022/06/02/Unity%20AI%E4%B9%8B%E8%A1%8C%E4%B8%BA%E6%A0%91/</url>
    
    <content type="html"><![CDATA[<h1 id="Unity-游戏AI之行为树"><a href="#Unity-游戏AI之行为树" class="headerlink" title="Unity 游戏AI之行为树"></a>Unity 游戏AI之行为树</h1><h2 id="游戏AI-行为树Part1：简介"><a href="#游戏AI-行为树Part1：简介" class="headerlink" title="游戏AI - 行为树Part1：简介"></a><strong>游戏AI - 行为树Part1：简介</strong></h2><p>游戏中的AI，大多数都是按照规则设定好的，没有太多花哨的技术。原因有几个：</p><p>一是出于风险成本的考虑，用一个新技术，需要程序员开发相应的算法和框架，游戏设计师重新上手设计方法和摸索算法的适用范围，小团队承受不起这样的开销，大团队又怕做坏名声；</p><p>二是“高级”的AI算法并不直观，难以设计。举一个例子，怎么利用神经网络来训练一个士兵AI？我见过的一个例子是设计师用几个按键来操作士兵移动攻击，然后程序自动记录敌我双方的数据和设计师的操作，最后利用这些信息作为input构建一个行为树。这个方法的问题有三个，一是效率奇慢，因为如果数据不够，行为树就可能覆盖不了所有情况，但多少才是“够”，又没有定论；二是错误的操作也会被记录下来，当然可以开发一个功能来删除设计师的某个动作；三是行为树的结果是无法解释的，相当于一个黑箱。</p><p><img src="https://raw.githubusercontent.com/MCIBlueMoon/PicGO_Img/main/6-1-1-1.jpg"></p><p>由于上述的原因，一般的公司都会使用比较传统的有限状态机。</p><p>虽然第一次听的话可能会拗口，其实有限状态机的意思其实很简单，它包含了有限个的状态和状态间的转换条件。最直白的说法就是几个**if…else…**语句。为了弄明白这个概念，我们讲一个英雄的故事：</p><p>从前有一个胆小如鼠的英雄，</p><ol><li>他看到哥布林就会跑过去打它；</li><li>他看到半兽人就会逃跑；</li><li>他看不到哥布林也看不到半兽人就会休息；</li><li>他看到哥布林也看到半兽人也会跑。</li></ol><p>我们可以从中抽象出这样的一个有限状态机：</p><p><img src="https://raw.githubusercontent.com/MCIBlueMoon/PicGO_Img/main/6-1-1-2.png"></p><p>有限状态机很符合我们的认知，但它有一个致命的缺点——它随着状态和转换条件的增多而急速地变得错综复杂，以至于很难对它做出改动（想象一下，多加一个状态，则需要增加几条转换线，越多状态，需要增加的转换线越多）。</p><p>也由于这个原因，比较多的开发者投入了行为树的怀抱。</p><h2 id="行为树"><a href="#行为树" class="headerlink" title="行为树"></a><strong>行为树</strong></h2><h2 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h2><p>行为树的概念会比状态机要复杂些——行为树是一个包含逻辑节点和行为节点的树结构，每次需要找出一个行为的时候，会从树的根节点出发，遍历各个节点，找出第一个和当前数据相符合的行为。</p><p>很拗口对吧，下面来一个生动点的解释，继续上面的英雄的故事，但是是用行为树表达出来：</p><p><img src="https://raw.githubusercontent.com/MCIBlueMoon/PicGO_Img/main/6-1-1-3.png"></p><p>这个行为树是等价于之前的有限状态机的。其中</p><p><strong>Root</strong>是根节点，每次需要寻找行为的时候都必须从这里开始。</p><p><strong>Priority Selector</strong>是一个逻辑节点，它的意思是让从左到右遍历自己的子节点，如果子节点的准入条件符合信息的话，就执行该子节点。如果英雄只看到哥布林，那么Orc in sight这个准入条件不符合，Escape不执行；Globlin in sight符合，于是执行Fight；因为Fight在Idle的左边，所以Fight的优先程度更高，于是Idle不执行。在我们的例子中，Idle可以看作是default behavior。</p><h2 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h2><p>从简单的行为树和有限状态机的对比，我们就可以看出，行为树由于引入了逻辑节点，它的转换条件更加少（线更少，更清晰），让<strong>拓展AI变得更加容易</strong>。</p><p>行为树还有另外一个优点：行为的<strong>重用</strong>（reuse)。</p><p>例如，Escape有一个跑的行为，而Fight则有跑的行为，和砍怪的行为。请看图：</p><p><img src="https://raw.githubusercontent.com/MCIBlueMoon/PicGO_Img/main/6-1-1-4.png"></p><p><strong>Sequence</strong>同样是一个逻辑节点，它的意思是从左到右按顺序执行子节点，并且仅仅在一个子节点执行完成后才执行下一个子节点。在例子中，Do Run需要有一个自己判断到达目的地的方法，当该方法返回end的时候，才会执行Do Slash。</p><p>Escape和Fight的Do Run行为节点是一样的，只是Fight多了一个Do Slash行为节点而已。所以Do Run是一个可以重用的节点。</p><p>在行为树中，我们能够编写好Do Run，Do Slash这些基础的行为节点，和设定一些准入条件，就可以<strong>组成千变万化的AI</strong>了！</p><p>我们希望英雄在逃跑的时候群众发出嘘声，而在攻击的时候出现欢呼声：</p><p><img src="https://raw.githubusercontent.com/MCIBlueMoon/PicGO_Img/main/6-1-1-5.png"></p><p>省略了其他部分，只画Escape部分。</p><p>Parallel是一个逻辑节点，它的意思是让所有子节点同时运行，那它什么时候结束呢，可以使当所有子节点都完成的时候结束，也可以让任一子节点完成时结束，视乎需要来做出选择。</p><p>那么在攻击当中会是怎么样实现的呢？大家可以尝试画出来，习惯一下行为树的思维方式。</p><h2 id="总结："><a href="#总结：" class="headerlink" title="总结："></a>总结：</h2><ol><li><p>行为树拥有3种节点：</p></li><li><ol><li><p>根节点 Root</p></li><li><p>逻辑节点（可拓展）：</p></li><li><ol><li>Priority Selector</li><li>Sequence</li><li>Parallel</li></ol></li><li><p>行为节点</p></li></ol></li><li><p>行为树在复杂的情况比有限状态机更清晰，更可拓展</p></li><li><p>行为树有利于逻辑的重用</p></li><li><p>设计得好的行为树可以千变万化！</p></li></ol><p>之后，我会展示在游戏开发中怎么利用行为树作为框架来使用。</p><hr><h2 id="游戏AI-行为树Part2：框架"><a href="#游戏AI-行为树Part2：框架" class="headerlink" title="游戏AI - 行为树Part2：框架"></a><strong>游戏AI - 行为树Part2：框架</strong></h2><h2 id="关键词"><a href="#关键词" class="headerlink" title="关键词"></a><strong>关键词</strong></h2><p>在展开之前，我们先定义几个关键词（基本都以BT作为前缀…是Behavior Tree之意，别误会了…），会在下面的框架用到。</p><p><strong>BTNode</strong>：所有节点的base class。定义了一些节点的基本功能，并提供一些可继承的函数。</p><p><strong>BTAction</strong>：行为节点，继承于BTNode。具体的游戏逻辑应该放在这个节点里面。</p><p><strong>BTPrecondition</strong>：节点的准入条件，每一个BTNode都会有一个。具体的游戏逻辑判断可以继承于它。</p><p><strong>BTPrioritySelector</strong>：Priority Selector逻辑节点，继承于BTNode。每次执行，先有序地遍历子节点，然后执行符合准入条件的<strong>第一个</strong>子结点。可以看作是根据条件来选择一个子结点的<strong>选择器</strong>。</p><p><strong>BTSequence</strong>：Sequence逻辑节点，继承于BTNode。每次执行，有序地执行各个子结点，当一个子结点结束后才执行下一个。严格按照节点A、B、C的顺序执行，当最后的行为C结束后，BTSequence结束。</p><p><strong>BTParallel</strong>：Parallel逻辑节点，继承于BTNode。<strong>同时</strong>执行各个子结点。每当<strong>任一</strong>子结点的准入条件失败，它就不会执行。</p><p><strong>BTParallelFlexible</strong>：Parallel的一个变异，继承于BTNode。<strong>同时</strong>执行各个子节点。当<strong>所有</strong>子结点的准入条件都失败，它就不会执行。</p><p><strong>BTTree</strong>：将所有节点组合起来的地方。</p><p><strong>Database</strong>：<a href="https://link.zhihu.com/?target=http://en.wikipedia.org/wiki/Blackboard_system">黑板</a>，一个存放<strong>共享</strong>数据的地方，可以看成是一个Key－Value的字典。为什么需要黑板呢？因为设计良好的行为逻辑，应该是独立的，可以在行为树的任何位置部署的。也就是说行为A和行为B并没有直接的沟通方法。黑板的作用就是作为一个行为树的“数据库”，让各个行为节点都可以储存数据进去，供感兴趣的行为节点利用。（同时，在Unity3d的语境下，Database继承MonoBehavior，可以提供各种Component给节点使用。）</p><p>UML类图：</p><p><img src="https://raw.githubusercontent.com/MCIBlueMoon/PicGO_Img/main/6-1-1-6.png"></p><h2 id="代码资源"><a href="#代码资源" class="headerlink" title="代码资源"></a><strong>代码资源</strong></h2><p>我们使用的框架的代码放在了Github：<a href="https://link.zhihu.com/?target=https://github.com/f15gdsy/BT-Framework">BT Framework</a>。它是用 C# 写的，但概念可以转换到任何语言。</p><p>我们的Demo例子是<a href="http://zhuanlan.zhihu.com/indiegamepixel/19890016">Part1</a>里提到的“贪生怕死的英雄”，Demo的代码可以在<a href="https://link.zhihu.com/?target=https://github.com/f15gdsy/BT-Test">这里</a>下载。Demo是用Unity3d写的。</p><h2 id="行为树的构建"><a href="#行为树的构建" class="headerlink" title="行为树的构建"></a><strong>行为树的构建</strong></h2><p>下面，我们会先从BT行为树框架的<strong>使用</strong>开始，然后再解释框架的实现。</p><p>BT行为树框架与外界的入口在BTTree，下面我们来看看BTTree的子类MoveAttackAI，我们在这里构建了一个行为树：</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs csharp"><span class="hljs-comment">// MoveAttackAI.cs</span><br><span class="hljs-comment">// 一个继承于BT Tree的一个类</span><br><br><span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">override</span> <span class="hljs-keyword">void</span> <span class="hljs-title">Init</span> ()</span> &#123;<br>   <span class="hljs-comment">// 初始化base class</span><br>   <span class="hljs-keyword">base</span>.Init();<br><br>   <span class="hljs-comment">// 创建根节点，根节点</span><br>   _root = <span class="hljs-keyword">new</span> BTPrioritySelector();<br>   <br>   <span class="hljs-comment">// ... 创建准入条件，如checkOrcInSight</span><br>   <span class="hljs-comment">// ... 创建行为／逻辑节点，如findDestination，run</span><br><br>   <span class="hljs-comment">// 搭建行为树</span><br>   <span class="hljs-comment">// Escape 节点</span><br>   BTParallel escape = <span class="hljs-keyword">new</span> BTParallel(BTParallel.ParallelFunction.Or, checkOrcInSight);<br>   &#123;<br>      escape.AddChild(findDestination);<br>      escape.AddChild(run);<br>   &#125;<br>   _root.AddChild(escape);<br><br>   <span class="hljs-comment">//... Fight 节点</span><br>   _root.AddChild(fight);<br><br>   <span class="hljs-comment">//... Idle 节点</span><br>   _root.AddChild(idle);<br>&#125;<br></code></pre></td></tr></table></figure><p>上图就是我们的行为树了！它基本对应了<a href="http://zhuanlan.zhihu.com/indiegamepixel/19890016">Part1</a>里面的图，不过有所修改。</p><p>\1. 在上面，我们创建Root节点，创建准入条件，和行为／逻辑节点，然后通过AddChild来搭建行为树。</p><p>\2. escape节点是一个Parallel逻辑节点，因为每次执行escape的时候我们都需要先找到逃跑的目的地，然后再跑。这时候可能有朋友会问，为什么不用Sequence呢？因为Sequence每次执行，都是按照行为A、行为B、行为C这样的顺序执行的，执行完行为C之后就结束。所以如果用Sequence，我们的目的地在跑到当前目的地之前就不能更新了。</p><p>\3. findDestination，和run这些行为都是继承于BTAction 。但是为什么我们要将选择目的地和跑这个动作分开呢？是为了更好地分离逻辑——Escape的跑和Fight的跑是一样的，但目的地选择不一样，Escape的目的地是半兽人的相反方向，Fight的目的地是哥布林的位置。</p><p>\4. 另外，在Part1的评论里面，</p><p><a href="https://www.zhihu.com/people/a44d48aa6a124b610a621bef6c16568f">@余冬冬</a></p><p>老师提到</p><blockquote><p>“为什么要有ROOT呢？ 直接prority selector不可以么。”</p></blockquote><p>在我们的例子里，Root的确就是一个Priority Selector！不过由于在base class——BTTree里面会对Root特别对待，所以在Part1里就特别提到它。</p><p>搭建一个行为树，最核心的就是上面的几行代码了，不难吧 :)</p><p>要在Unity3d里面的使用这一个行为树也很简单，在GameObject里面加入MoveAttackAI这个component就好（BTTree继承于MonoBehavior）。</p><p>如果在其他引擎当中使用，如Cocos2d-x，BTTree则应该拥有Update函数和自定义的初始化函数。</p><p>下面我们看看BT框架的实现。</p><h2 id="框架的实现"><a href="#框架的实现" class="headerlink" title="框架的实现"></a><strong>框架的实现</strong></h2><h2 id="BTNode和逻辑节点"><a href="#BTNode和逻辑节点" class="headerlink" title="BTNode和逻辑节点"></a>BTNode和逻辑节点</h2><p>BTNode提供了节点的最重要的接口：</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs csharp"><span class="hljs-comment">// BTNode.cs</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-keyword">class</span> <span class="hljs-title">BTNode</span> &#123;<br>   <span class="hljs-comment">//...</span><br><br>   <span class="hljs-comment">// 节点的准入条件</span><br>   <span class="hljs-keyword">public</span> BTPrecondition precondition;<br><br>   <span class="hljs-comment">// 黑板 </span><br>   <span class="hljs-keyword">public</span> Database database;<br><br>   <span class="hljs-comment">// 冷却功能</span><br>   <span class="hljs-keyword">public</span> <span class="hljs-built_in">float</span> interval = <span class="hljs-number">0</span>;<br><br>   <span class="hljs-comment">// 当false的时候，节点不会执行</span><br>   <span class="hljs-keyword">public</span> <span class="hljs-built_in">bool</span> activated;<br>   <br><br>   <span class="hljs-comment">// 节点初始化的接口，Database可提供Unity3d中的Component给节点使用</span><br>   <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">virtual</span> <span class="hljs-keyword">void</span> <span class="hljs-title">Activate</span> (<span class="hljs-params">Database database</span>)</span> &#123;<br>      <span class="hljs-comment">//...</span><br>   &#125;<br>   <br>   <span class="hljs-comment">// 检查节点能否执行，包括是否activated，是否冷却完成，是否通过准入条件，和个性化检查 (DoEvaluate)</span><br>   <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-built_in">bool</span> <span class="hljs-title">Evaluate</span> ()</span> &#123;<br>      <span class="hljs-built_in">bool</span> coolDownOK = CheckTimer();<br>      <span class="hljs-keyword">return</span> activated &amp;&amp; coolDownOK &amp;&amp; (precondition == <span class="hljs-literal">null</span> || precondition.Check()) &amp;&amp; DoEvaluate();<br>   &#125;<br><br>   <span class="hljs-comment">// 给子类提供个性化检查的接口</span><br>   <span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">virtual</span> <span class="hljs-built_in">bool</span> <span class="hljs-title">DoEvaluate</span> ()</span> &#123;<span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;&#125;<br><br>   <span class="hljs-comment">// 节点执行的接口，需要返回BTResult.Running，或者BTResult.Ended</span><br>   <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">virtual</span> BTResult <span class="hljs-title">Tick</span> ()</span> &#123;<span class="hljs-keyword">return</span> BTResult.Ended;&#125;<br><br>   <span class="hljs-comment">// 节点清零的接口</span><br>   <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">virtual</span> <span class="hljs-keyword">void</span> <span class="hljs-title">Clear</span> ()</span> &#123;&#125;<br><br>   <span class="hljs-comment">//...</span><br>&#125;<br></code></pre></td></tr></table></figure><p>BTNode提供给子类的接口中最重要的两个是DoEvaluate()和Tick()。</p><p><strong>DoEvaludate</strong>给子类提供个性化检查的接口（注意和<strong>Evaluate</strong>的不同），例如Sequence的检查和Priority Selector的检查是不一样的。例如Sequence和Priority Selector里都有节点A，B，C。第一次检查的时候，</p><p>Sequence只检查A就可以了，因为A不通过Evaluate，那么这个Sequence就没办法从头开始执行，所以Sequence的DoEvaludate也不通过。</p><p>而Priority Selector则先检查A，A不通过就检查B，如此类推，仅当所有的子结点都无法通过Evaluate的时候，才会不通过DoEvaludate。</p><p><strong>Tick</strong>是节点执行的接口，仅仅当Evaluate通过时，才会执行。子类需要重载Tick，才能达到所想要的逻辑。例如Sequence和Priority Selector，它们的Tick也是不一样的：</p><p>Sequence里当active child节点A Tick返回Ended时，Sequence就会将当前的active child设成节点B（如果有B的话），并返回Running。当Sequence最后的子结点N Tick返回Ended时，Sequence也返回Ended。</p><p>Priority Selector则是当目前的active child返回Ended的时候，它也返回Ended。Running的时候，它也返回Running。</p><p>正是通过重载DoEvaluate和Tick，BT框架实现了Sequence，PrioritySelector，Parallel，ParalleFlexible这几个逻辑节点。如果你有特殊的需求，也可以重载DoEvaluate和Tick来实现！</p><h2 id="BTAction"><a href="#BTAction" class="headerlink" title="BTAction"></a>BTAction</h2><p>BTAction是负责游戏逻辑的行为节点，也就是行为树里面的“行为”。</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><code class="hljs csharp"><span class="hljs-comment">// BTAction.cs</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title">BTAction</span> : <span class="hljs-title">BTNode</span> &#123;<br>   <span class="hljs-keyword">private</span> BTActionStatus _status = BTActionStatus.Ready;<br>   <br>   <span class="hljs-comment">//...</span><br><br>   <span class="hljs-comment">// 第一次进入行为</span><br>   <span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">virtual</span> <span class="hljs-keyword">void</span> <span class="hljs-title">Enter</span> ()</span> &#123;<span class="hljs-comment">//... Debug functionality&#125;</span><br>   <br>   <span class="hljs-comment">// 离开行为</span><br>   <span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">virtual</span> <span class="hljs-keyword">void</span> <span class="hljs-title">Exit</span> ()</span> &#123;<span class="hljs-comment">//... Debug functionality&#125;</span><br><br>   <span class="hljs-comment">// 行为的执行，返回BTResult</span><br>   <span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">virtual</span> BTResult <span class="hljs-title">Execute</span> ()</span> &#123;<span class="hljs-comment">//...&#125;</span><br><br>   <span class="hljs-comment">// 重载BTNode的Tick，加入了Enter，Exit，Execute的概念</span><br>   <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">override</span> BTResult <span class="hljs-title">Tick</span> ()</span> &#123;<br>      BTResult result = BTResult.Ended;<br>      <span class="hljs-keyword">if</span> (_status == BTActionStatus.Ready) &#123;<br>         Enter();<br> _status = BTActionStatus.Running;<br>      &#125;<br>      <br>      <span class="hljs-comment">// not using else so that the status changes reflect instantly</span><br>      <span class="hljs-keyword">if</span> (_status == BTActionStatus.Running) &#123;<br>         result = Execute();<br>         <span class="hljs-keyword">if</span> (result != BTResult.Running) &#123;<br>            Exit();<br>    _status = BTActionStatus.Ready;<br> &#125;<br>      &#125;<br>      <span class="hljs-keyword">return</span> result;<br>   &#125;<br><br>   <span class="hljs-comment">// 重载清零接口，因为外部没有办法调用Exit</span><br>   <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">override</span> <span class="hljs-keyword">void</span> <span class="hljs-title">Clear</span> ()</span> &#123;<br>      <span class="hljs-comment">// not cleared yet</span><br>      <span class="hljs-keyword">if</span> (_status != BTActionStatus.Ready) &#123;<br>         Exit();<br> _status = BTActionStatus.Ready;<br>      &#125;<br>   &#125;<br><br>   <span class="hljs-comment">//...</span><br><br>   <span class="hljs-keyword">private</span> <span class="hljs-built_in">enum</span> BTActionStatus &#123;<br>      Ready = <span class="hljs-number">1</span>,<br>      Running = <span class="hljs-number">2</span>,<br>   &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>BTAction里面最重要的是Tick，它重载了BTNode的Tick，增加了对Enter，Exit，Execute的支持。如果大家对有限状态机比较熟悉，一个状态机里面的状态通常都会支持这三个方法，分别用来初始化，清零，和执行逻辑。在每一次行为节点的一个运行周期（不是生命周期）里，Enter仅在一开始被调用，Exit仅在最后被调用，Execute会在每一次Tick被调用。</p><p>例如我们可以这样实现DoRun：</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs csharp"><span class="hljs-comment">// DoRun.cs</span><br><br><span class="hljs-comment">// 在某些简单的情况下，没有必要将动画和位移逻辑分开的话，可以这样写；</span><br><span class="hljs-comment">// 但通常为了更好的逻辑分离，我并不会将它们放在一起。而是分成两个不同的行为。</span><br><span class="hljs-comment">//   protected override void Enter () &#123;</span><br><span class="hljs-comment">//      database.GetComponent&lt;Animator&gt;().Play(&quot;Run&quot;);</span><br><span class="hljs-comment">//   &#125;</span><br><br><span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">override</span> BTResult <span class="hljs-title">Execute</span> ()</span> &#123;<br>   <span class="hljs-comment">//...</span><br><br>   <span class="hljs-keyword">if</span> (CheckArrived()) &#123;<br>      <span class="hljs-keyword">return</span> BTResult.Ended;   <span class="hljs-comment">// 告诉父节点我要结束了</span><br>   &#125;<br>   MoveToDestination();<br>   <span class="hljs-keyword">return</span> BTResult.Running;   <span class="hljs-comment">// 告诉父节点我还在运行</span><br>&#125;<br></code></pre></td></tr></table></figure><p>就是这么简单！</p><p>同时，我们可以看到DoRun并没有引用行为节点（也不应该引用），也就是说，它是一个逻辑上独立的行为节点，可以部署到行为树的任何位置。<strong>行为节点的逻辑独立，可以让我们写的每一个行为，都可以放到我们自己的逻辑库里面，给以后的项目调用！</strong></p><h2 id="Demo的局限和改进方法"><a href="#Demo的局限和改进方法" class="headerlink" title="Demo的局限和改进方法"></a><strong>Demo的局限和改进方法</strong></h2><p>如果你有耐心看到这里，你一定已经发现了Demo有一个bug——当半兽人和哥布林在同一方向（相对于英雄）的时候，英雄会先逃跑，然后在某一个点上迅速来回翻转。这是因为AI在Escape和Fight这两个分支上快速切换。</p><p>一个改进的方法是<strong>分等级的行为树（Hierarchical Behavior Tree）</strong>[1]：</p><p>有一个做决策的行为树A，和一个按照命令执行的行为树B。A根据游戏世界的情况做出决策，然后将命令放到Database里，然后B根据命令做出动作。由于两个行为树都放在一个Game Object里，所以Database是A、B共享的。通常，决策者A并不会每一帧都做出决策，而是设定一个冷却时间。</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs text">// DecisionAI.cs<br><br>// 设定1.5秒的冷却时间<br>_root.interval = 1.5f;<br></code></pre></td></tr></table></figure><p>改进的Demo代码可以在<a href="https://zhuanlan.zhihu.com/p/BT-Test/tree/improved">这里</a>下载。</p><p>这样一个分等级的行为树有两个好处：</p><ol><li>让决策逻辑和执行逻辑分离。面对同样的决策，不同Game Object可能有不同的执行方法。</li><li>玩家控制的角色和AI控制的角色可以分享同一个执行逻辑——只需要负责玩家控制的代码将命令存放到Database里面供执行逻辑使用就可以了。</li></ol><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a><strong>总结</strong></h2><ul><li>我们从BT框架的使用为学习入口，解释了行为树框架的实现原理；</li><li>也了解了怎么去拓展出个性化的逻辑节点和行为节点来满足项目需求；</li><li>通过逻辑独立地拓展BTAction，我们能够积累自己的逻辑库！</li><li>最后我们提到了分等级的行为树，它可以帮助我们将决策逻辑和执行逻辑分开（并解决了demo里面的一个bug）。</li></ul><p>BT框架还可以怎样拓展？我的下一个目标就是将它打造成一个Unity3d的插件，可以通过GUI来搭建行为树，而不用通过代码——当然，行为节点还是得自己用代码写。</p><p><strong>转自知乎</strong>：</p><p><a href="https://zhuanlan.zhihu.com/p/19890016">游戏AI - 行为树Part1：简介 - 知乎 (zhihu.com)</a></p><p><a href="https://zhuanlan.zhihu.com/p/19891875">游戏AI - 行为树Part2：框架 - 知乎 (zhihu.com)</a></p>]]></content>
    
    
    <categories>
      
      <category>游戏编程</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Unity</tag>
      
      <tag>AI</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>C# 之Yield Return语法的作用和好处</title>
    <link href="/2022/05/31/C%20Sharp%E4%B9%8BYield%20Return%E8%AF%AD%E6%B3%95%E7%9A%84%E4%BD%9C%E7%94%A8%E5%92%8C%E5%A5%BD%E5%A4%84/"/>
    <url>/2022/05/31/C%20Sharp%E4%B9%8BYield%20Return%E8%AF%AD%E6%B3%95%E7%9A%84%E4%BD%9C%E7%94%A8%E5%92%8C%E5%A5%BD%E5%A4%84/</url>
    
    <content type="html"><![CDATA[<p>首先我贴出平时正常输出偶数集合的办法</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><code class="hljs C#"><span class="hljs-comment">/*</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> *  学习Yield Return 语法</span><br><span class="hljs-comment"> *  使用两个方法，显示1 - 100之间的全部偶数</span><br><span class="hljs-comment"> * </span><br><span class="hljs-comment"> * </span><br><span class="hljs-comment"> */</span><br><br><span class="hljs-keyword">using</span> System;<br><span class="hljs-keyword">using</span> System.Collections.Generic;<br><br><br><span class="hljs-keyword">namespace</span> <span class="hljs-title">YieldReturn</span>语法解析<br>&#123;<br>    <span class="hljs-keyword">class</span> <span class="hljs-title">Program</span><br>    &#123;<br>       <span class="hljs-keyword">static</span>  <span class="hljs-keyword">private</span> List&lt;<span class="hljs-built_in">int</span>&gt; _numArray; <span class="hljs-comment">//用来保存1-100 这100个整数</span><br><br>        Program() <span class="hljs-comment">//构造函数。我们可以通过这个构造函数往待测试集合中存入1-100这100个测试数据</span><br>        &#123;<br>            _numArray = <span class="hljs-keyword">new</span> List&lt;<span class="hljs-built_in">int</span>&gt;(); <span class="hljs-comment">//给集合变量开始在堆内存上开内存，并且把内存首地址交给这个_numArray变量</span><br><br>            <span class="hljs-keyword">for</span> (<span class="hljs-built_in">int</span> i = <span class="hljs-number">1</span>; i &lt;= <span class="hljs-number">100</span>; i++) <br>            &#123;<br>                _numArray.Add(i);  <span class="hljs-comment">//把1到100保存在集合当中方便操作</span><br>            &#125;<br>        &#125;<br><br>        <span class="hljs-function"><span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">Main</span>(<span class="hljs-params"><span class="hljs-built_in">string</span>[] args</span>)</span><br>        &#123;<br>            <span class="hljs-keyword">new</span> Program();<br><br>            TestMethod();<br><br><br>        &#125;<br><br>        <span class="hljs-comment">//测试求1到100之间的全部偶数</span><br>        <span class="hljs-function"><span class="hljs-keyword">static</span>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">TestMethod</span>()</span><br>        &#123;<br>            <span class="hljs-keyword">foreach</span> (<span class="hljs-function"><span class="hljs-keyword">var</span> item <span class="hljs-keyword">in</span> <span class="hljs-title">GetAllEvenNumber</span>())</span> <br>            &#123;<br>                Console.WriteLine(item); <span class="hljs-comment">//输出偶数测试</span><br>            &#125;<br>        &#125;<br><br>        <span class="hljs-comment">//测试我们正常情况下拿到全部偶数的方法</span><br>       <span class="hljs-function"><span class="hljs-keyword">static</span>  IEnumerable&lt;<span class="hljs-built_in">int</span>&gt; <span class="hljs-title">GetAllEvenNumber</span>()</span><br>        &#123;<br>            List&lt;<span class="hljs-built_in">int</span>&gt; result = <span class="hljs-keyword">new</span> List&lt;<span class="hljs-built_in">int</span>&gt;(); <span class="hljs-comment">//开集合内存存偶数用</span><br><br>            <span class="hljs-keyword">foreach</span> (<span class="hljs-built_in">int</span> num <span class="hljs-keyword">in</span> _numArray) <br>            &#123;<br>                <span class="hljs-keyword">if</span>(num % <span class="hljs-number">2</span> == <span class="hljs-number">0</span>) <span class="hljs-comment">//判断是不是偶数</span><br>                &#123;<br>                    <span class="hljs-comment">//yield return num;</span><br>                    result.Add(num); <span class="hljs-comment">//存入集合</span><br>                &#125;<br>            &#125;<br><br>            <span class="hljs-comment">//返回偶数集合变量   可能有人会觉得奇怪返回类型不是List&lt;int&gt;这样可以吗</span><br>            <span class="hljs-comment">//这个就要回到我们的里氏替换原则了，子类是可以替换父类的，也就是当父类用</span><br>            <span class="hljs-comment">//比如我这个方法是想得到IEnumerable&lt;int&gt; 类型变量，但是我给了List&lt;int&gt;类型变量</span><br>            <span class="hljs-comment">//注意List&lt;int&gt; 是继承 IEnumerable&lt;int&gt; 的，什么意思当我们把子类当父类使用，</span><br>            <span class="hljs-comment">//那么大才小用，因为子类很多都是继承父亲，你自身增加很多字段或者方法，这样就不能用了。</span><br>            <span class="hljs-keyword">return</span> result;  <br>            <span class="hljs-comment">//yield break;</span><br>        &#125;<br><br><br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>贴出使用Yiele Return办法输出耦合集合</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><code class="hljs C#"><span class="hljs-comment">/*</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> *  学习Yield Return 语法</span><br><span class="hljs-comment"> *  使用两个方法，显示1 - 100之间的全部偶数</span><br><span class="hljs-comment"> * </span><br><span class="hljs-comment"> * </span><br><span class="hljs-comment"> */</span><br><br><span class="hljs-keyword">using</span> System;<br><span class="hljs-keyword">using</span> System.Collections.Generic;<br><br><br><span class="hljs-keyword">namespace</span> <span class="hljs-title">YieldReturn</span>语法解析<br>&#123;<br>    <span class="hljs-keyword">class</span> <span class="hljs-title">Program</span><br>    &#123;<br>       <span class="hljs-keyword">static</span>  <span class="hljs-keyword">private</span> List&lt;<span class="hljs-built_in">int</span>&gt; _numArray; <span class="hljs-comment">//用来保存1-100 这100个整数</span><br><br>        Program() <span class="hljs-comment">//构造函数。我们可以通过这个构造函数往待测试集合中存入1-100这100个测试数据</span><br>        &#123;<br>            _numArray = <span class="hljs-keyword">new</span> List&lt;<span class="hljs-built_in">int</span>&gt;(); <span class="hljs-comment">//给集合变量开始在堆内存上开内存，并且把内存首地址交给这个_numArray变量</span><br><br>            <span class="hljs-keyword">for</span> (<span class="hljs-built_in">int</span> i = <span class="hljs-number">1</span>; i &lt;= <span class="hljs-number">100</span>; i++) <br>            &#123;<br>                _numArray.Add(i);  <span class="hljs-comment">//把1到100保存在集合当中方便操作</span><br>            &#125;<br>        &#125;<br><br>        <span class="hljs-function"><span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">Main</span>(<span class="hljs-params"><span class="hljs-built_in">string</span>[] args</span>)</span><br>        &#123;<br>            <span class="hljs-keyword">new</span> Program();<br><br>            TestMethod();<br><br><br>        &#125;<br><br>        <span class="hljs-comment">//测试求1到100之间的全部偶数</span><br>        <span class="hljs-function"><span class="hljs-keyword">static</span>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">TestMethod</span>()</span><br>        &#123;<br>            <span class="hljs-keyword">foreach</span> (<span class="hljs-function"><span class="hljs-keyword">var</span> item <span class="hljs-keyword">in</span> <span class="hljs-title">GetAllEvenNumber</span>())</span> <br>            &#123;<br>                Console.WriteLine(item); <span class="hljs-comment">//输出偶数测试</span><br>            &#125;<br>        &#125;<br><br>        <span class="hljs-comment">//测试我们使用Yield Return情况下拿到全部偶数的方法</span><br>       <span class="hljs-function"><span class="hljs-keyword">static</span>  IEnumerable&lt;<span class="hljs-built_in">int</span>&gt; <span class="hljs-title">GetAllEvenNumber</span>()</span><br>        &#123;<br><br>            <span class="hljs-keyword">foreach</span> (<span class="hljs-built_in">int</span> num <span class="hljs-keyword">in</span> _numArray) <br>            &#123;<br>                <span class="hljs-keyword">if</span>(num % <span class="hljs-number">2</span> == <span class="hljs-number">0</span>) <span class="hljs-comment">//判断是不是偶数</span><br>                &#123;<br>                    <span class="hljs-keyword">yield</span> <span class="hljs-keyword">return</span> num; <span class="hljs-comment">//返回当前偶数</span><br><br>                &#125;<br>            &#125;        <br>            <span class="hljs-keyword">yield</span> <span class="hljs-keyword">break</span>;  <span class="hljs-comment">//当前集合已经遍历完毕，我们就跳出当前函数，其实你不加也可以</span><br>            <span class="hljs-comment">//这个作用就是提前结束当前函数，就是说这个函数运行完毕了。</span><br>        &#125;<br><br><br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>​大家测试了2个代码结果没，是不是都可以正确拿到全部偶数集合，具体我需要你们测，这样进步快，才会真是学会。只看不练假把戏。</p><p>​现在我们说他们的区别：<br>​这个才是真正要学的地方<br>​我们需要下断点</p><p><img src="https://raw.githubusercontent.com/MCIBlueMoon/PicGO_Img/main/5-31-1-1.png"></p><p>​我希望你是在断点调试，具体就贴太多，你会发现代码跑到Yield return num的时候，当前函数就会结束，并把这个num交给这里，我先上图</p><p><img src="https://raw.githubusercontent.com/MCIBlueMoon/PicGO_Img/main/5-31-1-2.png"></p><p>​最终会给item变量。<br>​然后输出，然后在执行 GetAllEvenNumber（）方法，和上次得到偶数是一样。<br>​我们发现这个Yield Return是可以让当前函数的进程状态切换到阻塞状态，然后去选择了把cpu交给当前的出进程，这样就转而执行调用方函数。 （补充个小知识点其实我们写的程序加入到内存中，并不定就是一个进程，我们会根据情况分成几个子进程去干活，方便操作系统去管理以及多道程序运行在内存，提高计算机资源的利用率）<br>​这样有个好处，我们假如有1000000个数据，我们需要得到里面的耦合，当我们通过这个方法得到一个耦合会立马显示在控制台上。而不是等很久也就把全部偶数都查找到存入集合当中，然后在一一遍历输出。<br>​这个好处是很大的。比如我们用户可能就看数据开始肯定不是全部值需要部分就可以，看完这些在看后面的，这样数据会让觉得显示没有延迟。</p><p>​下面我们来断点调一般的查找偶数的函数</p><p><img src="https://raw.githubusercontent.com/MCIBlueMoon/PicGO_Img/main/5-31-1-3.png"></p><p>​我们发现这个循环没有跑完是不会退出当前函数的，也就是必须要查找全部的偶数才可以。这样假如我们很多数据。就会一直等这个数据才可以拿到这个数据去显示给用户看。<br>这样就麻烦了。</p><p>​因此我们下个结论：Yield Return关键字的作用就是退出当前函数，并且会保存当前函数执行到什么地方，也就上下文。你发现没下次执行这个函数上次跑来的代码是不会重复执行的，</p><p>​但是你一般的return result 假如你在循环体提前return ,下面调这个函数是会从第一步开始重新执行的。不会记录上次执行的地方。</p><p>​<strong>转自CSDN :</strong> <a href="https://blog.csdn.net/qq_33060405/article/details/78484825">彻底搞懂C#之Yield Return语法的作用和好处_牛掰是怎么形成的的博客-CSDN博客_c# yield</a></p>]]></content>
    
    
    <categories>
      
      <category>编程语言</category>
      
    </categories>
    
    
    <tags>
      
      <tag>C Sharp</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>C# Array、ArrayList和List的区别</title>
    <link href="/2022/05/30/C%20Sharp%E4%B9%8BArray%E3%80%81ArrayList%E5%92%8CList%E7%9A%84%E5%8C%BA%E5%88%AB/"/>
    <url>/2022/05/30/C%20Sharp%E4%B9%8BArray%E3%80%81ArrayList%E5%92%8CList%E7%9A%84%E5%8C%BA%E5%88%AB/</url>
    
    <content type="html"><![CDATA[<h1 id="C-Array、ArrayList和List的区别"><a href="#C-Array、ArrayList和List的区别" class="headerlink" title="C#Array、ArrayList和List的区别"></a>C#Array、ArrayList和List的区别</h1><h3 id="Array"><a href="#Array" class="headerlink" title="Array"></a>Array</h3><p>​<strong>Array</strong> 类是 C# 中所有数组的基类，它是在 System 命名空间中定义。Array 类提供了各种⽤于数组的属性和⽅法。<br>属性如： IsReadOnly数组只读。Length数组长度。<br>⽅法常⽤的如下： </p><ol><li><p><strong>Clear</strong><br>根据元素的类型，设置数组中某个范围的元素为零、为 false 或者为 null。 </p></li><li><p><strong>Copy(Array, Array, Int32)</strong><br>从数组的第⼀个元素开始复制某个范围的元素到另⼀个数组的第⼀个元素位置。长度由⼀个 32 位整数指定。 </p></li><li><p><strong>CopyTo(Array, Int32)</strong><br>从当前的⼀维数组中复制所有的元素到⼀个指定的⼀维数组的指定索引位置。索引由⼀个 32 位整数指定。 </p></li><li><p><strong>GetLength</strong><br>获取⼀个 32 位整数，该值表⽰指定维度的数组中的元素总数。 </p></li><li><p><strong>GetType</strong><br>获取当前实例的类型。从对象（Object）继承。 </p></li><li><p><strong>GetValue(Int32)</strong><br>获取⼀维数组中指定位置的值。索引由⼀个 32 位整数指定。 </p></li><li><p><strong>IndexOf(Array, Object)</strong><br>搜索指定的对象，返回整个⼀维数组中第⼀次出现的索引。 </p></li><li><p><strong>Reverse(Array)</strong><br>逆转整个⼀维数组中元素的顺序。 </p></li><li><p><strong>SetValue(Object, Int32)</strong><br>给⼀维数组中指定位置的元素设置值。索引由⼀个 32 位整数指定。</p></li><li><p><strong>Sort(Array)</strong><br>使⽤数组的每个元素的 IComparable 实现来排序整个⼀维数组中的元素。 </p></li><li><p><strong>ToString</strong><br>返回⼀个表⽰当前对象的字符串。从对象（Object）继承。</p></li></ol><p>使⽤⽅法如下：</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs C#"><span class="hljs-built_in">int</span>[] nums = &#123;<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span> &#125;;<br>Array.Sort(nums);<br></code></pre></td></tr></table></figure><hr><h3 id="ArrayList"><a href="#ArrayList" class="headerlink" title="ArrayList"></a>ArrayList</h3><p>​<strong>ArrayList</strong>动态数组，是.Net Framework提供的⽤于数据存储和检索的专⽤类，它是命名空间System.Collections下的⼀部分。它的<br>⼤⼩是按照其中存储的数据来动态扩充与收缩的。所以，我们在声明ArrayList对象时并不需要指定它的长度。ArrayList继承了IList接⼝，<br>所以它可以很⽅便的进⾏数据的添加，插⼊和移除.比如：</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs C#">ArrayList al = <span class="hljs-keyword">new</span> ArrayList();<br><span class="hljs-comment">//新增数据</span><br>al.Add(<span class="hljs-string">&quot;abc&quot;</span>); al.Add(<span class="hljs-number">123</span>);<br><span class="hljs-comment">//修改数据</span><br>al[<span class="hljs-number">2</span>] = <span class="hljs-number">345</span>;<br><span class="hljs-comment">//移除数据</span><br>al.RemoveAt(<span class="hljs-number">0</span>);<br><span class="hljs-comment">//插⼊数据</span><br>al.Insert(<span class="hljs-number">0</span>, <span class="hljs-string">&quot;hello world&quot;</span>);<br></code></pre></td></tr></table></figure><hr><h3 id="List"><a href="#List" class="headerlink" title="List"></a>List</h3><p>​在ArrayList中，我们不仅插⼊了字符串”abc”，⽽且⼜插⼊了数字123。这样在ArrayList中插⼊不同类型的数据是允许的。因为<br>ArrayList会把所有插⼊其中的数据都当作为object类型来处理。这样，在我们使⽤ArrayList中的数据来处理问题的时候，很可能会报类型<br>不匹配的错误，也就是说ArrayList不是类型安全的。既使我们保证在插⼊数据的时候都很小心，都有插⼊了同⼀类型的数据，但在使⽤的<br>时候，我们也需要将它们转化为对应的原类型来处理。这就存在了装箱与拆箱的操作，会带来很⼤的性能损耗。<br>　　正是因为ArrayList存在不安全类型与装箱拆箱的缺点，所以在C#2.0后出现了泛型的概念。⽽<strong>List</strong>类是ArrayList类的泛型等效类。它<br>的⼤部分⽤法都与ArrayList相似，因为List类也继承了IList接⼝。最关键的区别在于，在声明List集合时，我们同时需要为其声明List集合<br>内数据的对象类型。 比如：</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs C#">List&lt;<span class="hljs-built_in">int</span>&gt; list = <span class="hljs-keyword">new</span> List&lt;<span class="hljs-built_in">int</span>&gt;();<br><span class="hljs-comment">//新增数据</span><br> list.Add(<span class="hljs-number">123</span>);<br><span class="hljs-comment">//修改数据</span><br>list[<span class="hljs-number">0</span>] = <span class="hljs-number">345</span>;<br><span class="hljs-comment">//移除数据</span><br>list.RemoveAt(<span class="hljs-number">0</span>);<br></code></pre></td></tr></table></figure><p>​上例中，如果我们往List泛型集合中插⼊string字符”hello world”，IDE就会报错，且不能通过编译。这样就避免了前⾯讲的类型安全问题与装箱拆箱的性能问题了。</p><p><strong>List泛型的好处：</strong><br>　　通过允许指定泛型类或⽅法操作的特定类型，泛型功能将类型安全的任务从您转移给了编译器。不需要编写代码来检测数据类型是否正确，因为会在编译时强制使⽤正确的数据类型。减少了类型强制转换的需要和运⾏时错误的可能性。泛型提供了类型安全但没有增加多个实现的开销。</p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><ol><li><p>三者都⽤来处理⼀组数据，继承了IEnumerable接⼝，可⽤于for循环处理。都可以通过索引下标进⾏获取和设置元素。</p></li><li><p>Array在内存中是连续的，长度固定，⽆法删除和增加新的元素。⽽ArrayList或List的容量可根据需要⾃动插⼊和删除元素。</p></li><li><p>Array可以具有多个维度，⽽ ArrayList或 List&lt; T&gt; 始终只具有⼀个维度。但是，您可以轻松创建数组列表或列表的列表。</p></li><li><p>特定类型（Object 除外）的数组 的性能优于 ArrayList的性能。 这是因为 ArrayList的元素属于 Object 类型；所以在存储或检索值类型时通常发⽣装箱和拆箱操作。不过，在不需要重新分配时（即最初的容量⼗分接近列表的最⼤容量），List&lt; T&gt; 的性能与同类型的数组⼗分相近。</p></li><li><p>在决定使⽤ List 还是使⽤ArrayList 类（两者具有类似的功能）时，记住List 类在⼤多数情况下执⾏得更好并且是类型安全的。如果对<br>List&lt; T&gt; 类的类型T 使⽤引⽤类型，则两个类的⾏为是完全相同的。但是，如果对类型T使⽤值类型，则需要考虑实现和装箱问题。</p></li></ol>]]></content>
    
    
    <categories>
      
      <category>编程语言</category>
      
    </categories>
    
    
    <tags>
      
      <tag>C Sharp</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2022/05/29/hello-world/"/>
    <url>/2022/05/29/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    
    <tags>
      
      <tag>hexo</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
