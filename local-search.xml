<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>Unity 生命周期</title>
    <link href="/2022/06/05/Unity%E8%84%9A%E6%9C%AC%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F/"/>
    <url>/2022/06/05/Unity%E8%84%9A%E6%9C%AC%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F/</url>
    
    <content type="html"><![CDATA[<h1 id="Unity生命周期"><a href="#Unity生命周期" class="headerlink" title="Unity生命周期"></a>Unity生命周期</h1><h3 id="Unity生命周期图"><a href="#Unity生命周期图" class="headerlink" title="Unity生命周期图"></a>Unity生命周期图</h3><p><img src="https://raw.githubusercontent.com/MCIBlueMoon/PicGO_Img/main/06-05/Unity%E8%84%9A%E6%9C%AC%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F.png"></p><h3 id="Reset"><a href="#Reset" class="headerlink" title="Reset"></a>Reset</h3><p><strong>Reset</strong> 是当Scripts第一次绑定到物体上或者点击Reset按钮的时候会触发，且只在Editor的模式下触发，游戏打包的时候并不会触发。</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs c#"><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">Reset</span>()</span><br>&#123;<br>    <br>&#125;<br></code></pre></td></tr></table></figure><h3 id="Awake"><a href="#Awake" class="headerlink" title="Awake"></a>Awake</h3><p><strong>Awake</strong> 是当脚本实例在游戏运行被载入的时候运行，一般为了初始化游戏变量和游戏状态，注意，无论函数是否被激活，Awake 都会执行。</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs c#"><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">Awake</span>()</span><br>&#123;<br>    <br>&#125;<br></code></pre></td></tr></table></figure><h3 id="OnEable"><a href="#OnEable" class="headerlink" title="OnEable"></a>OnEable</h3><p><strong>OnEable</strong> 是在游戏对象是可激活状态的时候会调用</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs C#"><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">OnEable</span>()</span><br>&#123;<br>    <br>&#125;<br></code></pre></td></tr></table></figure><h3 id="Start"><a href="#Start" class="headerlink" title="Start"></a>Start</h3><p><strong>Start</strong> 也是为了初始化变量的方法但是和 <strong>Awake</strong> 有些许的不同</p><p>首先，<strong>Awake</strong> 是在项目初始化的时候被调用的，但是 <strong>Start</strong> 可能在初始之后调用，所有如果把一些状态放在 <strong>Start</strong> 中进行初始化，会很不安全，因为可能会有别的函数在 <strong>Start</strong> 之前就被执行，造成一些空引用的问题。</p><p>其次，如果对象不是处于激活状态，<strong>Start</strong> 是不会被调用的，而 <strong>Awake</strong> 无论是不是激活都会被引用。</p><p><strong>所以，建议把所有初始化都放在Awake上</strong></p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs C#"><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">Start</span>()</span><br>&#123;<br>    <br>&#125;<br></code></pre></td></tr></table></figure><h3 id="FixedUpdate"><a href="#FixedUpdate" class="headerlink" title="FixedUpdate"></a>FixedUpdate</h3><p>Unity 建议，把所有的物理行为的每帧更新的逻辑都应当放在 <strong>FixedUpdate</strong> 里，原因因为这个是固定间隔的帧执行的，而普通的 <strong>Update</strong> 每一帧之间的间隔是不固定的，不一样的，所以一般都希望物体上的力是均匀的，否则会出现卡顿的现象。</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs C#"><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">FixedUpdate</span>()</span><br>&#123;<br>    <br>&#125;<br></code></pre></td></tr></table></figure><h3 id="OnTrigger、OnCollison、OnMouse"><a href="#OnTrigger、OnCollison、OnMouse" class="headerlink" title="OnTrigger、OnCollison、OnMouse"></a>OnTrigger、OnCollison、OnMouse</h3><p>先处理 <strong>OnTrigger</strong> 触发器行为，再处理 <strong>OnCollison</strong> 碰撞体行为，在此处理 <strong>OnMouse</strong> 的点击鼠标，点击输入的行为.</p><p>这三个行为是完全连续的行为。</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs C#"><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">OnTrigger</span>()</span><br>&#123;<br>    <br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">OnCollison</span>()</span><br>&#123;<br>    <br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">OnMouse</span>()</span><br>&#123;<br>    <br>&#125;<br></code></pre></td></tr></table></figure><h3 id="Update"><a href="#Update" class="headerlink" title="Update"></a>Update</h3><p><strong>Update</strong> 是每一帧进行调用，是我们实现大部分游戏逻辑的方法.</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs C#"><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">Update</span>()</span><br>&#123;<br>    <br>&#125;<br></code></pre></td></tr></table></figure><h3 id="LateUpdate"><a href="#LateUpdate" class="headerlink" title="LateUpdate"></a>LateUpdate</h3><p><strong>LateUpdate</strong> 再所有 Update 方法执行之后执行，一般用于摄像机的跟随移动。</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs C#"><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">LateUpdate</span>()</span><br>&#123;<br>    <br>&#125;<br></code></pre></td></tr></table></figure><h3 id="OnGUI"><a href="#OnGUI" class="headerlink" title="OnGUI"></a>OnGUI</h3><p><strong>OnGUI</strong> 处理GUI数据，也是每一帧执行一次</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs C#"><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">OnGUI</span>()</span><br>&#123;<br>    <br>&#125;<br></code></pre></td></tr></table></figure><h3 id="OnDisable"><a href="#OnDisable" class="headerlink" title="OnDisable"></a>OnDisable</h3><p><strong>OnDisable</strong> 在对象被取消活跃状态的时候响应，和 <strong>OnEnable</strong> 相对应，但与此同时对象再次被激活的时候，<strong>OnEnable</strong> 也会再次响应。</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs C#"><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">OnDisable</span>()</span><br>&#123;<br>    <br>&#125;<br></code></pre></td></tr></table></figure><h3 id="OnDestory"><a href="#OnDestory" class="headerlink" title="OnDestory"></a>OnDestory</h3><p><strong>OnDestory</strong> 在对象被销毁的时候被调用，但是如果一开始对象就处于不激活状态然后被销毁了，就不会调用这个函数。</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs C#"><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">OnDisable</span>()</span><br>&#123;<br>    <br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>游戏编程</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Unity</tag>
      
      <tag>生命周期</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Unity 游戏AI之行为树</title>
    <link href="/2022/06/02/Unity%20AI%E4%B9%8B%E8%A1%8C%E4%B8%BA%E6%A0%91/"/>
    <url>/2022/06/02/Unity%20AI%E4%B9%8B%E8%A1%8C%E4%B8%BA%E6%A0%91/</url>
    
    <content type="html"><![CDATA[<h1 id="Unity-游戏AI之行为树"><a href="#Unity-游戏AI之行为树" class="headerlink" title="Unity 游戏AI之行为树"></a>Unity 游戏AI之行为树</h1><h2 id="游戏AI-行为树Part1：简介"><a href="#游戏AI-行为树Part1：简介" class="headerlink" title="游戏AI - 行为树Part1：简介"></a><strong>游戏AI - 行为树Part1：简介</strong></h2><p>游戏中的AI，大多数都是按照规则设定好的，没有太多花哨的技术。原因有几个：</p><p>一是出于风险成本的考虑，用一个新技术，需要程序员开发相应的算法和框架，游戏设计师重新上手设计方法和摸索算法的适用范围，小团队承受不起这样的开销，大团队又怕做坏名声；</p><p>二是“高级”的AI算法并不直观，难以设计。举一个例子，怎么利用神经网络来训练一个士兵AI？我见过的一个例子是设计师用几个按键来操作士兵移动攻击，然后程序自动记录敌我双方的数据和设计师的操作，最后利用这些信息作为input构建一个行为树。这个方法的问题有三个，一是效率奇慢，因为如果数据不够，行为树就可能覆盖不了所有情况，但多少才是“够”，又没有定论；二是错误的操作也会被记录下来，当然可以开发一个功能来删除设计师的某个动作；三是行为树的结果是无法解释的，相当于一个黑箱。</p><p><img src="https://raw.githubusercontent.com/MCIBlueMoon/PicGO_Img/main/6-1-1-1.jpg"></p><p>由于上述的原因，一般的公司都会使用比较传统的有限状态机。</p><p>虽然第一次听的话可能会拗口，其实有限状态机的意思其实很简单，它包含了有限个的状态和状态间的转换条件。最直白的说法就是几个**if…else…**语句。为了弄明白这个概念，我们讲一个英雄的故事：</p><p>从前有一个胆小如鼠的英雄，</p><ol><li>他看到哥布林就会跑过去打它；</li><li>他看到半兽人就会逃跑；</li><li>他看不到哥布林也看不到半兽人就会休息；</li><li>他看到哥布林也看到半兽人也会跑。</li></ol><p>我们可以从中抽象出这样的一个有限状态机：</p><p><img src="https://raw.githubusercontent.com/MCIBlueMoon/PicGO_Img/main/6-1-1-2.png"></p><p>有限状态机很符合我们的认知，但它有一个致命的缺点——它随着状态和转换条件的增多而急速地变得错综复杂，以至于很难对它做出改动（想象一下，多加一个状态，则需要增加几条转换线，越多状态，需要增加的转换线越多）。</p><p>也由于这个原因，比较多的开发者投入了行为树的怀抱。</p><h2 id="行为树"><a href="#行为树" class="headerlink" title="行为树"></a><strong>行为树</strong></h2><h2 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h2><p>行为树的概念会比状态机要复杂些——行为树是一个包含逻辑节点和行为节点的树结构，每次需要找出一个行为的时候，会从树的根节点出发，遍历各个节点，找出第一个和当前数据相符合的行为。</p><p>很拗口对吧，下面来一个生动点的解释，继续上面的英雄的故事，但是是用行为树表达出来：</p><p><img src="https://raw.githubusercontent.com/MCIBlueMoon/PicGO_Img/main/6-1-1-3.png"></p><p>这个行为树是等价于之前的有限状态机的。其中</p><p><strong>Root</strong>是根节点，每次需要寻找行为的时候都必须从这里开始。</p><p><strong>Priority Selector</strong>是一个逻辑节点，它的意思是让从左到右遍历自己的子节点，如果子节点的准入条件符合信息的话，就执行该子节点。如果英雄只看到哥布林，那么Orc in sight这个准入条件不符合，Escape不执行；Globlin in sight符合，于是执行Fight；因为Fight在Idle的左边，所以Fight的优先程度更高，于是Idle不执行。在我们的例子中，Idle可以看作是default behavior。</p><h2 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h2><p>从简单的行为树和有限状态机的对比，我们就可以看出，行为树由于引入了逻辑节点，它的转换条件更加少（线更少，更清晰），让<strong>拓展AI变得更加容易</strong>。</p><p>行为树还有另外一个优点：行为的<strong>重用</strong>（reuse)。</p><p>例如，Escape有一个跑的行为，而Fight则有跑的行为，和砍怪的行为。请看图：</p><p><img src="https://raw.githubusercontent.com/MCIBlueMoon/PicGO_Img/main/6-1-1-4.png"></p><p><strong>Sequence</strong>同样是一个逻辑节点，它的意思是从左到右按顺序执行子节点，并且仅仅在一个子节点执行完成后才执行下一个子节点。在例子中，Do Run需要有一个自己判断到达目的地的方法，当该方法返回end的时候，才会执行Do Slash。</p><p>Escape和Fight的Do Run行为节点是一样的，只是Fight多了一个Do Slash行为节点而已。所以Do Run是一个可以重用的节点。</p><p>在行为树中，我们能够编写好Do Run，Do Slash这些基础的行为节点，和设定一些准入条件，就可以<strong>组成千变万化的AI</strong>了！</p><p>我们希望英雄在逃跑的时候群众发出嘘声，而在攻击的时候出现欢呼声：</p><p><img src="https://raw.githubusercontent.com/MCIBlueMoon/PicGO_Img/main/6-1-1-5.png"></p><p>省略了其他部分，只画Escape部分。</p><p>Parallel是一个逻辑节点，它的意思是让所有子节点同时运行，那它什么时候结束呢，可以使当所有子节点都完成的时候结束，也可以让任一子节点完成时结束，视乎需要来做出选择。</p><p>那么在攻击当中会是怎么样实现的呢？大家可以尝试画出来，习惯一下行为树的思维方式。</p><h2 id="总结："><a href="#总结：" class="headerlink" title="总结："></a>总结：</h2><ol><li><p>行为树拥有3种节点：</p></li><li><ol><li><p>根节点 Root</p></li><li><p>逻辑节点（可拓展）：</p></li><li><ol><li>Priority Selector</li><li>Sequence</li><li>Parallel</li></ol></li><li><p>行为节点</p></li></ol></li><li><p>行为树在复杂的情况比有限状态机更清晰，更可拓展</p></li><li><p>行为树有利于逻辑的重用</p></li><li><p>设计得好的行为树可以千变万化！</p></li></ol><p>之后，我会展示在游戏开发中怎么利用行为树作为框架来使用。</p><hr><h2 id="游戏AI-行为树Part2：框架"><a href="#游戏AI-行为树Part2：框架" class="headerlink" title="游戏AI - 行为树Part2：框架"></a><strong>游戏AI - 行为树Part2：框架</strong></h2><h2 id="关键词"><a href="#关键词" class="headerlink" title="关键词"></a><strong>关键词</strong></h2><p>在展开之前，我们先定义几个关键词（基本都以BT作为前缀…是Behavior Tree之意，别误会了…），会在下面的框架用到。</p><p><strong>BTNode</strong>：所有节点的base class。定义了一些节点的基本功能，并提供一些可继承的函数。</p><p><strong>BTAction</strong>：行为节点，继承于BTNode。具体的游戏逻辑应该放在这个节点里面。</p><p><strong>BTPrecondition</strong>：节点的准入条件，每一个BTNode都会有一个。具体的游戏逻辑判断可以继承于它。</p><p><strong>BTPrioritySelector</strong>：Priority Selector逻辑节点，继承于BTNode。每次执行，先有序地遍历子节点，然后执行符合准入条件的<strong>第一个</strong>子结点。可以看作是根据条件来选择一个子结点的<strong>选择器</strong>。</p><p><strong>BTSequence</strong>：Sequence逻辑节点，继承于BTNode。每次执行，有序地执行各个子结点，当一个子结点结束后才执行下一个。严格按照节点A、B、C的顺序执行，当最后的行为C结束后，BTSequence结束。</p><p><strong>BTParallel</strong>：Parallel逻辑节点，继承于BTNode。<strong>同时</strong>执行各个子结点。每当<strong>任一</strong>子结点的准入条件失败，它就不会执行。</p><p><strong>BTParallelFlexible</strong>：Parallel的一个变异，继承于BTNode。<strong>同时</strong>执行各个子节点。当<strong>所有</strong>子结点的准入条件都失败，它就不会执行。</p><p><strong>BTTree</strong>：将所有节点组合起来的地方。</p><p><strong>Database</strong>：<a href="https://link.zhihu.com/?target=http://en.wikipedia.org/wiki/Blackboard_system">黑板</a>，一个存放<strong>共享</strong>数据的地方，可以看成是一个Key－Value的字典。为什么需要黑板呢？因为设计良好的行为逻辑，应该是独立的，可以在行为树的任何位置部署的。也就是说行为A和行为B并没有直接的沟通方法。黑板的作用就是作为一个行为树的“数据库”，让各个行为节点都可以储存数据进去，供感兴趣的行为节点利用。（同时，在Unity3d的语境下，Database继承MonoBehavior，可以提供各种Component给节点使用。）</p><p>UML类图：</p><p><img src="https://raw.githubusercontent.com/MCIBlueMoon/PicGO_Img/main/6-1-1-6.png"></p><h2 id="代码资源"><a href="#代码资源" class="headerlink" title="代码资源"></a><strong>代码资源</strong></h2><p>我们使用的框架的代码放在了Github：<a href="https://link.zhihu.com/?target=https://github.com/f15gdsy/BT-Framework">BT Framework</a>。它是用 C# 写的，但概念可以转换到任何语言。</p><p>我们的Demo例子是<a href="http://zhuanlan.zhihu.com/indiegamepixel/19890016">Part1</a>里提到的“贪生怕死的英雄”，Demo的代码可以在<a href="https://link.zhihu.com/?target=https://github.com/f15gdsy/BT-Test">这里</a>下载。Demo是用Unity3d写的。</p><h2 id="行为树的构建"><a href="#行为树的构建" class="headerlink" title="行为树的构建"></a><strong>行为树的构建</strong></h2><p>下面，我们会先从BT行为树框架的<strong>使用</strong>开始，然后再解释框架的实现。</p><p>BT行为树框架与外界的入口在BTTree，下面我们来看看BTTree的子类MoveAttackAI，我们在这里构建了一个行为树：</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs csharp"><span class="hljs-comment">// MoveAttackAI.cs</span><br><span class="hljs-comment">// 一个继承于BT Tree的一个类</span><br><br><span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">override</span> <span class="hljs-keyword">void</span> <span class="hljs-title">Init</span> ()</span> &#123;<br>   <span class="hljs-comment">// 初始化base class</span><br>   <span class="hljs-keyword">base</span>.Init();<br><br>   <span class="hljs-comment">// 创建根节点，根节点</span><br>   _root = <span class="hljs-keyword">new</span> BTPrioritySelector();<br>   <br>   <span class="hljs-comment">// ... 创建准入条件，如checkOrcInSight</span><br>   <span class="hljs-comment">// ... 创建行为／逻辑节点，如findDestination，run</span><br><br>   <span class="hljs-comment">// 搭建行为树</span><br>   <span class="hljs-comment">// Escape 节点</span><br>   BTParallel escape = <span class="hljs-keyword">new</span> BTParallel(BTParallel.ParallelFunction.Or, checkOrcInSight);<br>   &#123;<br>      escape.AddChild(findDestination);<br>      escape.AddChild(run);<br>   &#125;<br>   _root.AddChild(escape);<br><br>   <span class="hljs-comment">//... Fight 节点</span><br>   _root.AddChild(fight);<br><br>   <span class="hljs-comment">//... Idle 节点</span><br>   _root.AddChild(idle);<br>&#125;<br></code></pre></td></tr></table></figure><p>上图就是我们的行为树了！它基本对应了<a href="http://zhuanlan.zhihu.com/indiegamepixel/19890016">Part1</a>里面的图，不过有所修改。</p><p>\1. 在上面，我们创建Root节点，创建准入条件，和行为／逻辑节点，然后通过AddChild来搭建行为树。</p><p>\2. escape节点是一个Parallel逻辑节点，因为每次执行escape的时候我们都需要先找到逃跑的目的地，然后再跑。这时候可能有朋友会问，为什么不用Sequence呢？因为Sequence每次执行，都是按照行为A、行为B、行为C这样的顺序执行的，执行完行为C之后就结束。所以如果用Sequence，我们的目的地在跑到当前目的地之前就不能更新了。</p><p>\3. findDestination，和run这些行为都是继承于BTAction 。但是为什么我们要将选择目的地和跑这个动作分开呢？是为了更好地分离逻辑——Escape的跑和Fight的跑是一样的，但目的地选择不一样，Escape的目的地是半兽人的相反方向，Fight的目的地是哥布林的位置。</p><p>\4. 另外，在Part1的评论里面，</p><p><a href="https://www.zhihu.com/people/a44d48aa6a124b610a621bef6c16568f">@余冬冬</a></p><p>老师提到</p><blockquote><p>“为什么要有ROOT呢？ 直接prority selector不可以么。”</p></blockquote><p>在我们的例子里，Root的确就是一个Priority Selector！不过由于在base class——BTTree里面会对Root特别对待，所以在Part1里就特别提到它。</p><p>搭建一个行为树，最核心的就是上面的几行代码了，不难吧 :)</p><p>要在Unity3d里面的使用这一个行为树也很简单，在GameObject里面加入MoveAttackAI这个component就好（BTTree继承于MonoBehavior）。</p><p>如果在其他引擎当中使用，如Cocos2d-x，BTTree则应该拥有Update函数和自定义的初始化函数。</p><p>下面我们看看BT框架的实现。</p><h2 id="框架的实现"><a href="#框架的实现" class="headerlink" title="框架的实现"></a><strong>框架的实现</strong></h2><h2 id="BTNode和逻辑节点"><a href="#BTNode和逻辑节点" class="headerlink" title="BTNode和逻辑节点"></a>BTNode和逻辑节点</h2><p>BTNode提供了节点的最重要的接口：</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs csharp"><span class="hljs-comment">// BTNode.cs</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-keyword">class</span> <span class="hljs-title">BTNode</span> &#123;<br>   <span class="hljs-comment">//...</span><br><br>   <span class="hljs-comment">// 节点的准入条件</span><br>   <span class="hljs-keyword">public</span> BTPrecondition precondition;<br><br>   <span class="hljs-comment">// 黑板 </span><br>   <span class="hljs-keyword">public</span> Database database;<br><br>   <span class="hljs-comment">// 冷却功能</span><br>   <span class="hljs-keyword">public</span> <span class="hljs-built_in">float</span> interval = <span class="hljs-number">0</span>;<br><br>   <span class="hljs-comment">// 当false的时候，节点不会执行</span><br>   <span class="hljs-keyword">public</span> <span class="hljs-built_in">bool</span> activated;<br>   <br><br>   <span class="hljs-comment">// 节点初始化的接口，Database可提供Unity3d中的Component给节点使用</span><br>   <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">virtual</span> <span class="hljs-keyword">void</span> <span class="hljs-title">Activate</span> (<span class="hljs-params">Database database</span>)</span> &#123;<br>      <span class="hljs-comment">//...</span><br>   &#125;<br>   <br>   <span class="hljs-comment">// 检查节点能否执行，包括是否activated，是否冷却完成，是否通过准入条件，和个性化检查 (DoEvaluate)</span><br>   <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-built_in">bool</span> <span class="hljs-title">Evaluate</span> ()</span> &#123;<br>      <span class="hljs-built_in">bool</span> coolDownOK = CheckTimer();<br>      <span class="hljs-keyword">return</span> activated &amp;&amp; coolDownOK &amp;&amp; (precondition == <span class="hljs-literal">null</span> || precondition.Check()) &amp;&amp; DoEvaluate();<br>   &#125;<br><br>   <span class="hljs-comment">// 给子类提供个性化检查的接口</span><br>   <span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">virtual</span> <span class="hljs-built_in">bool</span> <span class="hljs-title">DoEvaluate</span> ()</span> &#123;<span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;&#125;<br><br>   <span class="hljs-comment">// 节点执行的接口，需要返回BTResult.Running，或者BTResult.Ended</span><br>   <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">virtual</span> BTResult <span class="hljs-title">Tick</span> ()</span> &#123;<span class="hljs-keyword">return</span> BTResult.Ended;&#125;<br><br>   <span class="hljs-comment">// 节点清零的接口</span><br>   <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">virtual</span> <span class="hljs-keyword">void</span> <span class="hljs-title">Clear</span> ()</span> &#123;&#125;<br><br>   <span class="hljs-comment">//...</span><br>&#125;<br></code></pre></td></tr></table></figure><p>BTNode提供给子类的接口中最重要的两个是DoEvaluate()和Tick()。</p><p><strong>DoEvaludate</strong>给子类提供个性化检查的接口（注意和<strong>Evaluate</strong>的不同），例如Sequence的检查和Priority Selector的检查是不一样的。例如Sequence和Priority Selector里都有节点A，B，C。第一次检查的时候，</p><p>Sequence只检查A就可以了，因为A不通过Evaluate，那么这个Sequence就没办法从头开始执行，所以Sequence的DoEvaludate也不通过。</p><p>而Priority Selector则先检查A，A不通过就检查B，如此类推，仅当所有的子结点都无法通过Evaluate的时候，才会不通过DoEvaludate。</p><p><strong>Tick</strong>是节点执行的接口，仅仅当Evaluate通过时，才会执行。子类需要重载Tick，才能达到所想要的逻辑。例如Sequence和Priority Selector，它们的Tick也是不一样的：</p><p>Sequence里当active child节点A Tick返回Ended时，Sequence就会将当前的active child设成节点B（如果有B的话），并返回Running。当Sequence最后的子结点N Tick返回Ended时，Sequence也返回Ended。</p><p>Priority Selector则是当目前的active child返回Ended的时候，它也返回Ended。Running的时候，它也返回Running。</p><p>正是通过重载DoEvaluate和Tick，BT框架实现了Sequence，PrioritySelector，Parallel，ParalleFlexible这几个逻辑节点。如果你有特殊的需求，也可以重载DoEvaluate和Tick来实现！</p><h2 id="BTAction"><a href="#BTAction" class="headerlink" title="BTAction"></a>BTAction</h2><p>BTAction是负责游戏逻辑的行为节点，也就是行为树里面的“行为”。</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><code class="hljs csharp"><span class="hljs-comment">// BTAction.cs</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title">BTAction</span> : <span class="hljs-title">BTNode</span> &#123;<br>   <span class="hljs-keyword">private</span> BTActionStatus _status = BTActionStatus.Ready;<br>   <br>   <span class="hljs-comment">//...</span><br><br>   <span class="hljs-comment">// 第一次进入行为</span><br>   <span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">virtual</span> <span class="hljs-keyword">void</span> <span class="hljs-title">Enter</span> ()</span> &#123;<span class="hljs-comment">//... Debug functionality&#125;</span><br>   <br>   <span class="hljs-comment">// 离开行为</span><br>   <span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">virtual</span> <span class="hljs-keyword">void</span> <span class="hljs-title">Exit</span> ()</span> &#123;<span class="hljs-comment">//... Debug functionality&#125;</span><br><br>   <span class="hljs-comment">// 行为的执行，返回BTResult</span><br>   <span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">virtual</span> BTResult <span class="hljs-title">Execute</span> ()</span> &#123;<span class="hljs-comment">//...&#125;</span><br><br>   <span class="hljs-comment">// 重载BTNode的Tick，加入了Enter，Exit，Execute的概念</span><br>   <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">override</span> BTResult <span class="hljs-title">Tick</span> ()</span> &#123;<br>      BTResult result = BTResult.Ended;<br>      <span class="hljs-keyword">if</span> (_status == BTActionStatus.Ready) &#123;<br>         Enter();<br> _status = BTActionStatus.Running;<br>      &#125;<br>      <br>      <span class="hljs-comment">// not using else so that the status changes reflect instantly</span><br>      <span class="hljs-keyword">if</span> (_status == BTActionStatus.Running) &#123;<br>         result = Execute();<br>         <span class="hljs-keyword">if</span> (result != BTResult.Running) &#123;<br>            Exit();<br>    _status = BTActionStatus.Ready;<br> &#125;<br>      &#125;<br>      <span class="hljs-keyword">return</span> result;<br>   &#125;<br><br>   <span class="hljs-comment">// 重载清零接口，因为外部没有办法调用Exit</span><br>   <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">override</span> <span class="hljs-keyword">void</span> <span class="hljs-title">Clear</span> ()</span> &#123;<br>      <span class="hljs-comment">// not cleared yet</span><br>      <span class="hljs-keyword">if</span> (_status != BTActionStatus.Ready) &#123;<br>         Exit();<br> _status = BTActionStatus.Ready;<br>      &#125;<br>   &#125;<br><br>   <span class="hljs-comment">//...</span><br><br>   <span class="hljs-keyword">private</span> <span class="hljs-built_in">enum</span> BTActionStatus &#123;<br>      Ready = <span class="hljs-number">1</span>,<br>      Running = <span class="hljs-number">2</span>,<br>   &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>BTAction里面最重要的是Tick，它重载了BTNode的Tick，增加了对Enter，Exit，Execute的支持。如果大家对有限状态机比较熟悉，一个状态机里面的状态通常都会支持这三个方法，分别用来初始化，清零，和执行逻辑。在每一次行为节点的一个运行周期（不是生命周期）里，Enter仅在一开始被调用，Exit仅在最后被调用，Execute会在每一次Tick被调用。</p><p>例如我们可以这样实现DoRun：</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs csharp"><span class="hljs-comment">// DoRun.cs</span><br><br><span class="hljs-comment">// 在某些简单的情况下，没有必要将动画和位移逻辑分开的话，可以这样写；</span><br><span class="hljs-comment">// 但通常为了更好的逻辑分离，我并不会将它们放在一起。而是分成两个不同的行为。</span><br><span class="hljs-comment">//   protected override void Enter () &#123;</span><br><span class="hljs-comment">//      database.GetComponent&lt;Animator&gt;().Play(&quot;Run&quot;);</span><br><span class="hljs-comment">//   &#125;</span><br><br><span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">override</span> BTResult <span class="hljs-title">Execute</span> ()</span> &#123;<br>   <span class="hljs-comment">//...</span><br><br>   <span class="hljs-keyword">if</span> (CheckArrived()) &#123;<br>      <span class="hljs-keyword">return</span> BTResult.Ended;   <span class="hljs-comment">// 告诉父节点我要结束了</span><br>   &#125;<br>   MoveToDestination();<br>   <span class="hljs-keyword">return</span> BTResult.Running;   <span class="hljs-comment">// 告诉父节点我还在运行</span><br>&#125;<br></code></pre></td></tr></table></figure><p>就是这么简单！</p><p>同时，我们可以看到DoRun并没有引用行为节点（也不应该引用），也就是说，它是一个逻辑上独立的行为节点，可以部署到行为树的任何位置。<strong>行为节点的逻辑独立，可以让我们写的每一个行为，都可以放到我们自己的逻辑库里面，给以后的项目调用！</strong></p><h2 id="Demo的局限和改进方法"><a href="#Demo的局限和改进方法" class="headerlink" title="Demo的局限和改进方法"></a><strong>Demo的局限和改进方法</strong></h2><p>如果你有耐心看到这里，你一定已经发现了Demo有一个bug——当半兽人和哥布林在同一方向（相对于英雄）的时候，英雄会先逃跑，然后在某一个点上迅速来回翻转。这是因为AI在Escape和Fight这两个分支上快速切换。</p><p>一个改进的方法是<strong>分等级的行为树（Hierarchical Behavior Tree）</strong>[1]：</p><p>有一个做决策的行为树A，和一个按照命令执行的行为树B。A根据游戏世界的情况做出决策，然后将命令放到Database里，然后B根据命令做出动作。由于两个行为树都放在一个Game Object里，所以Database是A、B共享的。通常，决策者A并不会每一帧都做出决策，而是设定一个冷却时间。</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs text">// DecisionAI.cs<br><br>// 设定1.5秒的冷却时间<br>_root.interval = 1.5f;<br></code></pre></td></tr></table></figure><p>改进的Demo代码可以在<a href="https://zhuanlan.zhihu.com/p/BT-Test/tree/improved">这里</a>下载。</p><p>这样一个分等级的行为树有两个好处：</p><ol><li>让决策逻辑和执行逻辑分离。面对同样的决策，不同Game Object可能有不同的执行方法。</li><li>玩家控制的角色和AI控制的角色可以分享同一个执行逻辑——只需要负责玩家控制的代码将命令存放到Database里面供执行逻辑使用就可以了。</li></ol><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a><strong>总结</strong></h2><ul><li>我们从BT框架的使用为学习入口，解释了行为树框架的实现原理；</li><li>也了解了怎么去拓展出个性化的逻辑节点和行为节点来满足项目需求；</li><li>通过逻辑独立地拓展BTAction，我们能够积累自己的逻辑库！</li><li>最后我们提到了分等级的行为树，它可以帮助我们将决策逻辑和执行逻辑分开（并解决了demo里面的一个bug）。</li></ul><p>BT框架还可以怎样拓展？我的下一个目标就是将它打造成一个Unity3d的插件，可以通过GUI来搭建行为树，而不用通过代码——当然，行为节点还是得自己用代码写。</p><p><strong>转自知乎</strong>：</p><p><a href="https://zhuanlan.zhihu.com/p/19890016">游戏AI - 行为树Part1：简介 - 知乎 (zhihu.com)</a></p><p><a href="https://zhuanlan.zhihu.com/p/19891875">游戏AI - 行为树Part2：框架 - 知乎 (zhihu.com)</a></p>]]></content>
    
    
    <categories>
      
      <category>游戏编程</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Unity</tag>
      
      <tag>AI</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>C# 之Yield Return语法的作用和好处</title>
    <link href="/2022/05/31/C%20Sharp%E4%B9%8BYield%20Return%E8%AF%AD%E6%B3%95%E7%9A%84%E4%BD%9C%E7%94%A8%E5%92%8C%E5%A5%BD%E5%A4%84/"/>
    <url>/2022/05/31/C%20Sharp%E4%B9%8BYield%20Return%E8%AF%AD%E6%B3%95%E7%9A%84%E4%BD%9C%E7%94%A8%E5%92%8C%E5%A5%BD%E5%A4%84/</url>
    
    <content type="html"><![CDATA[<p>首先我贴出平时正常输出偶数集合的办法</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><code class="hljs C#"><span class="hljs-comment">/*</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> *  学习Yield Return 语法</span><br><span class="hljs-comment"> *  使用两个方法，显示1 - 100之间的全部偶数</span><br><span class="hljs-comment"> * </span><br><span class="hljs-comment"> * </span><br><span class="hljs-comment"> */</span><br><br><span class="hljs-keyword">using</span> System;<br><span class="hljs-keyword">using</span> System.Collections.Generic;<br><br><br><span class="hljs-keyword">namespace</span> <span class="hljs-title">YieldReturn</span>语法解析<br>&#123;<br>    <span class="hljs-keyword">class</span> <span class="hljs-title">Program</span><br>    &#123;<br>       <span class="hljs-keyword">static</span>  <span class="hljs-keyword">private</span> List&lt;<span class="hljs-built_in">int</span>&gt; _numArray; <span class="hljs-comment">//用来保存1-100 这100个整数</span><br><br>        Program() <span class="hljs-comment">//构造函数。我们可以通过这个构造函数往待测试集合中存入1-100这100个测试数据</span><br>        &#123;<br>            _numArray = <span class="hljs-keyword">new</span> List&lt;<span class="hljs-built_in">int</span>&gt;(); <span class="hljs-comment">//给集合变量开始在堆内存上开内存，并且把内存首地址交给这个_numArray变量</span><br><br>            <span class="hljs-keyword">for</span> (<span class="hljs-built_in">int</span> i = <span class="hljs-number">1</span>; i &lt;= <span class="hljs-number">100</span>; i++) <br>            &#123;<br>                _numArray.Add(i);  <span class="hljs-comment">//把1到100保存在集合当中方便操作</span><br>            &#125;<br>        &#125;<br><br>        <span class="hljs-function"><span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">Main</span>(<span class="hljs-params"><span class="hljs-built_in">string</span>[] args</span>)</span><br>        &#123;<br>            <span class="hljs-keyword">new</span> Program();<br><br>            TestMethod();<br><br><br>        &#125;<br><br>        <span class="hljs-comment">//测试求1到100之间的全部偶数</span><br>        <span class="hljs-function"><span class="hljs-keyword">static</span>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">TestMethod</span>()</span><br>        &#123;<br>            <span class="hljs-keyword">foreach</span> (<span class="hljs-function"><span class="hljs-keyword">var</span> item <span class="hljs-keyword">in</span> <span class="hljs-title">GetAllEvenNumber</span>())</span> <br>            &#123;<br>                Console.WriteLine(item); <span class="hljs-comment">//输出偶数测试</span><br>            &#125;<br>        &#125;<br><br>        <span class="hljs-comment">//测试我们正常情况下拿到全部偶数的方法</span><br>       <span class="hljs-function"><span class="hljs-keyword">static</span>  IEnumerable&lt;<span class="hljs-built_in">int</span>&gt; <span class="hljs-title">GetAllEvenNumber</span>()</span><br>        &#123;<br>            List&lt;<span class="hljs-built_in">int</span>&gt; result = <span class="hljs-keyword">new</span> List&lt;<span class="hljs-built_in">int</span>&gt;(); <span class="hljs-comment">//开集合内存存偶数用</span><br><br>            <span class="hljs-keyword">foreach</span> (<span class="hljs-built_in">int</span> num <span class="hljs-keyword">in</span> _numArray) <br>            &#123;<br>                <span class="hljs-keyword">if</span>(num % <span class="hljs-number">2</span> == <span class="hljs-number">0</span>) <span class="hljs-comment">//判断是不是偶数</span><br>                &#123;<br>                    <span class="hljs-comment">//yield return num;</span><br>                    result.Add(num); <span class="hljs-comment">//存入集合</span><br>                &#125;<br>            &#125;<br><br>            <span class="hljs-comment">//返回偶数集合变量   可能有人会觉得奇怪返回类型不是List&lt;int&gt;这样可以吗</span><br>            <span class="hljs-comment">//这个就要回到我们的里氏替换原则了，子类是可以替换父类的，也就是当父类用</span><br>            <span class="hljs-comment">//比如我这个方法是想得到IEnumerable&lt;int&gt; 类型变量，但是我给了List&lt;int&gt;类型变量</span><br>            <span class="hljs-comment">//注意List&lt;int&gt; 是继承 IEnumerable&lt;int&gt; 的，什么意思当我们把子类当父类使用，</span><br>            <span class="hljs-comment">//那么大才小用，因为子类很多都是继承父亲，你自身增加很多字段或者方法，这样就不能用了。</span><br>            <span class="hljs-keyword">return</span> result;  <br>            <span class="hljs-comment">//yield break;</span><br>        &#125;<br><br><br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>贴出使用Yiele Return办法输出耦合集合</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><code class="hljs C#"><span class="hljs-comment">/*</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> *  学习Yield Return 语法</span><br><span class="hljs-comment"> *  使用两个方法，显示1 - 100之间的全部偶数</span><br><span class="hljs-comment"> * </span><br><span class="hljs-comment"> * </span><br><span class="hljs-comment"> */</span><br><br><span class="hljs-keyword">using</span> System;<br><span class="hljs-keyword">using</span> System.Collections.Generic;<br><br><br><span class="hljs-keyword">namespace</span> <span class="hljs-title">YieldReturn</span>语法解析<br>&#123;<br>    <span class="hljs-keyword">class</span> <span class="hljs-title">Program</span><br>    &#123;<br>       <span class="hljs-keyword">static</span>  <span class="hljs-keyword">private</span> List&lt;<span class="hljs-built_in">int</span>&gt; _numArray; <span class="hljs-comment">//用来保存1-100 这100个整数</span><br><br>        Program() <span class="hljs-comment">//构造函数。我们可以通过这个构造函数往待测试集合中存入1-100这100个测试数据</span><br>        &#123;<br>            _numArray = <span class="hljs-keyword">new</span> List&lt;<span class="hljs-built_in">int</span>&gt;(); <span class="hljs-comment">//给集合变量开始在堆内存上开内存，并且把内存首地址交给这个_numArray变量</span><br><br>            <span class="hljs-keyword">for</span> (<span class="hljs-built_in">int</span> i = <span class="hljs-number">1</span>; i &lt;= <span class="hljs-number">100</span>; i++) <br>            &#123;<br>                _numArray.Add(i);  <span class="hljs-comment">//把1到100保存在集合当中方便操作</span><br>            &#125;<br>        &#125;<br><br>        <span class="hljs-function"><span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">Main</span>(<span class="hljs-params"><span class="hljs-built_in">string</span>[] args</span>)</span><br>        &#123;<br>            <span class="hljs-keyword">new</span> Program();<br><br>            TestMethod();<br><br><br>        &#125;<br><br>        <span class="hljs-comment">//测试求1到100之间的全部偶数</span><br>        <span class="hljs-function"><span class="hljs-keyword">static</span>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">TestMethod</span>()</span><br>        &#123;<br>            <span class="hljs-keyword">foreach</span> (<span class="hljs-function"><span class="hljs-keyword">var</span> item <span class="hljs-keyword">in</span> <span class="hljs-title">GetAllEvenNumber</span>())</span> <br>            &#123;<br>                Console.WriteLine(item); <span class="hljs-comment">//输出偶数测试</span><br>            &#125;<br>        &#125;<br><br>        <span class="hljs-comment">//测试我们使用Yield Return情况下拿到全部偶数的方法</span><br>       <span class="hljs-function"><span class="hljs-keyword">static</span>  IEnumerable&lt;<span class="hljs-built_in">int</span>&gt; <span class="hljs-title">GetAllEvenNumber</span>()</span><br>        &#123;<br><br>            <span class="hljs-keyword">foreach</span> (<span class="hljs-built_in">int</span> num <span class="hljs-keyword">in</span> _numArray) <br>            &#123;<br>                <span class="hljs-keyword">if</span>(num % <span class="hljs-number">2</span> == <span class="hljs-number">0</span>) <span class="hljs-comment">//判断是不是偶数</span><br>                &#123;<br>                    <span class="hljs-keyword">yield</span> <span class="hljs-keyword">return</span> num; <span class="hljs-comment">//返回当前偶数</span><br><br>                &#125;<br>            &#125;        <br>            <span class="hljs-keyword">yield</span> <span class="hljs-keyword">break</span>;  <span class="hljs-comment">//当前集合已经遍历完毕，我们就跳出当前函数，其实你不加也可以</span><br>            <span class="hljs-comment">//这个作用就是提前结束当前函数，就是说这个函数运行完毕了。</span><br>        &#125;<br><br><br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>​大家测试了2个代码结果没，是不是都可以正确拿到全部偶数集合，具体我需要你们测，这样进步快，才会真是学会。只看不练假把戏。</p><p>​现在我们说他们的区别：<br>​这个才是真正要学的地方<br>​我们需要下断点</p><p><img src="https://raw.githubusercontent.com/MCIBlueMoon/PicGO_Img/main/5-31-1-1.png"></p><p>​我希望你是在断点调试，具体就贴太多，你会发现代码跑到Yield return num的时候，当前函数就会结束，并把这个num交给这里，我先上图</p><p><img src="https://raw.githubusercontent.com/MCIBlueMoon/PicGO_Img/main/5-31-1-2.png"></p><p>​最终会给item变量。<br>​然后输出，然后在执行 GetAllEvenNumber（）方法，和上次得到偶数是一样。<br>​我们发现这个Yield Return是可以让当前函数的进程状态切换到阻塞状态，然后去选择了把cpu交给当前的出进程，这样就转而执行调用方函数。 （补充个小知识点其实我们写的程序加入到内存中，并不定就是一个进程，我们会根据情况分成几个子进程去干活，方便操作系统去管理以及多道程序运行在内存，提高计算机资源的利用率）<br>​这样有个好处，我们假如有1000000个数据，我们需要得到里面的耦合，当我们通过这个方法得到一个耦合会立马显示在控制台上。而不是等很久也就把全部偶数都查找到存入集合当中，然后在一一遍历输出。<br>​这个好处是很大的。比如我们用户可能就看数据开始肯定不是全部值需要部分就可以，看完这些在看后面的，这样数据会让觉得显示没有延迟。</p><p>​下面我们来断点调一般的查找偶数的函数</p><p><img src="https://raw.githubusercontent.com/MCIBlueMoon/PicGO_Img/main/5-31-1-3.png"></p><p>​我们发现这个循环没有跑完是不会退出当前函数的，也就是必须要查找全部的偶数才可以。这样假如我们很多数据。就会一直等这个数据才可以拿到这个数据去显示给用户看。<br>这样就麻烦了。</p><p>​因此我们下个结论：Yield Return关键字的作用就是退出当前函数，并且会保存当前函数执行到什么地方，也就上下文。你发现没下次执行这个函数上次跑来的代码是不会重复执行的，</p><p>​但是你一般的return result 假如你在循环体提前return ,下面调这个函数是会从第一步开始重新执行的。不会记录上次执行的地方。</p><p>​<strong>转自CSDN :</strong> <a href="https://blog.csdn.net/qq_33060405/article/details/78484825">彻底搞懂C#之Yield Return语法的作用和好处_牛掰是怎么形成的的博客-CSDN博客_c# yield</a></p>]]></content>
    
    
    <categories>
      
      <category>编程语言</category>
      
    </categories>
    
    
    <tags>
      
      <tag>C Sharp</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>C# Array、ArrayList和List的区别</title>
    <link href="/2022/05/30/C%20Sharp%E4%B9%8BArray%E3%80%81ArrayList%E5%92%8CList%E7%9A%84%E5%8C%BA%E5%88%AB/"/>
    <url>/2022/05/30/C%20Sharp%E4%B9%8BArray%E3%80%81ArrayList%E5%92%8CList%E7%9A%84%E5%8C%BA%E5%88%AB/</url>
    
    <content type="html"><![CDATA[<h1 id="C-Array、ArrayList和List的区别"><a href="#C-Array、ArrayList和List的区别" class="headerlink" title="C#Array、ArrayList和List的区别"></a>C#Array、ArrayList和List的区别</h1><h3 id="Array"><a href="#Array" class="headerlink" title="Array"></a>Array</h3><p>​<strong>Array</strong> 类是 C# 中所有数组的基类，它是在 System 命名空间中定义。Array 类提供了各种⽤于数组的属性和⽅法。<br>属性如： IsReadOnly数组只读。Length数组长度。<br>⽅法常⽤的如下： </p><ol><li><p><strong>Clear</strong><br>根据元素的类型，设置数组中某个范围的元素为零、为 false 或者为 null。 </p></li><li><p><strong>Copy(Array, Array, Int32)</strong><br>从数组的第⼀个元素开始复制某个范围的元素到另⼀个数组的第⼀个元素位置。长度由⼀个 32 位整数指定。 </p></li><li><p><strong>CopyTo(Array, Int32)</strong><br>从当前的⼀维数组中复制所有的元素到⼀个指定的⼀维数组的指定索引位置。索引由⼀个 32 位整数指定。 </p></li><li><p><strong>GetLength</strong><br>获取⼀个 32 位整数，该值表⽰指定维度的数组中的元素总数。 </p></li><li><p><strong>GetType</strong><br>获取当前实例的类型。从对象（Object）继承。 </p></li><li><p><strong>GetValue(Int32)</strong><br>获取⼀维数组中指定位置的值。索引由⼀个 32 位整数指定。 </p></li><li><p><strong>IndexOf(Array, Object)</strong><br>搜索指定的对象，返回整个⼀维数组中第⼀次出现的索引。 </p></li><li><p><strong>Reverse(Array)</strong><br>逆转整个⼀维数组中元素的顺序。 </p></li><li><p><strong>SetValue(Object, Int32)</strong><br>给⼀维数组中指定位置的元素设置值。索引由⼀个 32 位整数指定。</p></li><li><p><strong>Sort(Array)</strong><br>使⽤数组的每个元素的 IComparable 实现来排序整个⼀维数组中的元素。 </p></li><li><p><strong>ToString</strong><br>返回⼀个表⽰当前对象的字符串。从对象（Object）继承。</p></li></ol><p>使⽤⽅法如下：</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs C#"><span class="hljs-built_in">int</span>[] nums = &#123;<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span> &#125;;<br>Array.Sort(nums);<br></code></pre></td></tr></table></figure><hr><h3 id="ArrayList"><a href="#ArrayList" class="headerlink" title="ArrayList"></a>ArrayList</h3><p>​<strong>ArrayList</strong>动态数组，是.Net Framework提供的⽤于数据存储和检索的专⽤类，它是命名空间System.Collections下的⼀部分。它的<br>⼤⼩是按照其中存储的数据来动态扩充与收缩的。所以，我们在声明ArrayList对象时并不需要指定它的长度。ArrayList继承了IList接⼝，<br>所以它可以很⽅便的进⾏数据的添加，插⼊和移除.比如：</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs C#">ArrayList al = <span class="hljs-keyword">new</span> ArrayList();<br><span class="hljs-comment">//新增数据</span><br>al.Add(<span class="hljs-string">&quot;abc&quot;</span>); al.Add(<span class="hljs-number">123</span>);<br><span class="hljs-comment">//修改数据</span><br>al[<span class="hljs-number">2</span>] = <span class="hljs-number">345</span>;<br><span class="hljs-comment">//移除数据</span><br>al.RemoveAt(<span class="hljs-number">0</span>);<br><span class="hljs-comment">//插⼊数据</span><br>al.Insert(<span class="hljs-number">0</span>, <span class="hljs-string">&quot;hello world&quot;</span>);<br></code></pre></td></tr></table></figure><hr><h3 id="List"><a href="#List" class="headerlink" title="List"></a>List</h3><p>​在ArrayList中，我们不仅插⼊了字符串”abc”，⽽且⼜插⼊了数字123。这样在ArrayList中插⼊不同类型的数据是允许的。因为<br>ArrayList会把所有插⼊其中的数据都当作为object类型来处理。这样，在我们使⽤ArrayList中的数据来处理问题的时候，很可能会报类型<br>不匹配的错误，也就是说ArrayList不是类型安全的。既使我们保证在插⼊数据的时候都很小心，都有插⼊了同⼀类型的数据，但在使⽤的<br>时候，我们也需要将它们转化为对应的原类型来处理。这就存在了装箱与拆箱的操作，会带来很⼤的性能损耗。<br>　　正是因为ArrayList存在不安全类型与装箱拆箱的缺点，所以在C#2.0后出现了泛型的概念。⽽<strong>List</strong>类是ArrayList类的泛型等效类。它<br>的⼤部分⽤法都与ArrayList相似，因为List类也继承了IList接⼝。最关键的区别在于，在声明List集合时，我们同时需要为其声明List集合<br>内数据的对象类型。 比如：</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs C#">List&lt;<span class="hljs-built_in">int</span>&gt; list = <span class="hljs-keyword">new</span> List&lt;<span class="hljs-built_in">int</span>&gt;();<br><span class="hljs-comment">//新增数据</span><br> list.Add(<span class="hljs-number">123</span>);<br><span class="hljs-comment">//修改数据</span><br>list[<span class="hljs-number">0</span>] = <span class="hljs-number">345</span>;<br><span class="hljs-comment">//移除数据</span><br>list.RemoveAt(<span class="hljs-number">0</span>);<br></code></pre></td></tr></table></figure><p>​上例中，如果我们往List泛型集合中插⼊string字符”hello world”，IDE就会报错，且不能通过编译。这样就避免了前⾯讲的类型安全问题与装箱拆箱的性能问题了。</p><p><strong>List泛型的好处：</strong><br>　　通过允许指定泛型类或⽅法操作的特定类型，泛型功能将类型安全的任务从您转移给了编译器。不需要编写代码来检测数据类型是否正确，因为会在编译时强制使⽤正确的数据类型。减少了类型强制转换的需要和运⾏时错误的可能性。泛型提供了类型安全但没有增加多个实现的开销。</p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><ol><li><p>三者都⽤来处理⼀组数据，继承了IEnumerable接⼝，可⽤于for循环处理。都可以通过索引下标进⾏获取和设置元素。</p></li><li><p>Array在内存中是连续的，长度固定，⽆法删除和增加新的元素。⽽ArrayList或List的容量可根据需要⾃动插⼊和删除元素。</p></li><li><p>Array可以具有多个维度，⽽ ArrayList或 List&lt; T&gt; 始终只具有⼀个维度。但是，您可以轻松创建数组列表或列表的列表。</p></li><li><p>特定类型（Object 除外）的数组 的性能优于 ArrayList的性能。 这是因为 ArrayList的元素属于 Object 类型；所以在存储或检索值类型时通常发⽣装箱和拆箱操作。不过，在不需要重新分配时（即最初的容量⼗分接近列表的最⼤容量），List&lt; T&gt; 的性能与同类型的数组⼗分相近。</p></li><li><p>在决定使⽤ List 还是使⽤ArrayList 类（两者具有类似的功能）时，记住List 类在⼤多数情况下执⾏得更好并且是类型安全的。如果对<br>List&lt; T&gt; 类的类型T 使⽤引⽤类型，则两个类的⾏为是完全相同的。但是，如果对类型T使⽤值类型，则需要考虑实现和装箱问题。</p></li></ol>]]></content>
    
    
    <categories>
      
      <category>编程语言</category>
      
    </categories>
    
    
    <tags>
      
      <tag>C Sharp</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2022/05/29/hello-world/"/>
    <url>/2022/05/29/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    
    <tags>
      
      <tag>hexo</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
